#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ UART
"""

import sys
import time
import random
from pathlib import Path
from typing import Dict, List

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

def test_full_signal_processing_cycle():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç UART –¥–æ UI"""
    print("üß™ –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤...")
    
    try:
        from core.signal_manager import SignalManager
        from core.signal_processor import SignalProcessor
        from core.signal_validator import SignalValidator
        from core.flag_manager import FlagManager
        from core.serial_manager import SerialManager
        from config.config_loader import ConfigLoader
        from core.signal_types import SignalType, SignalMapping
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        flag_manager = FlagManager()
        signal_processor = SignalProcessor()
        signal_validator = SignalValidator()
        signal_manager = SignalManager(
            processor=signal_processor,
            validator=signal_validator,
            flag_manager=flag_manager
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ SerialManager —Å SignalManager
        serial_manager = SerialManager(signal_manager=signal_manager)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_loader = ConfigLoader()
        signal_mappings = config_loader.get_signal_mappings()
        signal_manager.register_signals(signal_mappings)
        
        print("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_signals = [
            ("TEMP", "temperature", "25.5"),
            ("STATUS", "device_status", "running"),
            ("ERROR", "error_code", "0"),
            ("PRESSURE", "pressure", "1.2"),
            ("MODE", "operation_mode", "auto")
        ]
        
        print("üì° –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤...")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ SerialManager
        for signal_name, variable_name, value in test_signals:
            data = f"{signal_name}:{value}"
            print(f"   –û—Ç–ø—Ä–∞–≤–∫–∞: {data}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ SignalManager
            result = signal_manager.process_incoming_data(data)
            if result:
                print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω: {signal_name} -> {variable_name} = {value}")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
                actual_value = flag_manager.get_flag(variable_name)
                print(f"   üìä –ó–Ω–∞—á–µ–Ω–∏–µ –≤ FlagManager: {actual_value}")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {data}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = signal_manager.get_statistics()
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        print(f"   - –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {stats.get('total_signals', 0)}")
        print(f"   - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats.get('processed_signals', 0)}")
        print(f"   - –û—à–∏–±–æ–∫: {stats.get('errors', 0)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_serial_manager_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å SerialManager"""
    print("\nüß™ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å SerialManager...")
    
    try:
        from core.signal_manager import SignalManager
        from core.signal_processor import SignalProcessor
        from core.signal_validator import SignalValidator
        from core.flag_manager import FlagManager
        from core.serial_manager import SerialManager
        from core.signal_types import SignalType, SignalMapping
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        flag_manager = FlagManager()
        signal_processor = SignalProcessor()
        signal_validator = SignalValidator()
        signal_manager = SignalManager(
            processor=signal_processor,
            validator=signal_validator,
            flag_manager=flag_manager
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ SerialManager
        serial_manager = SerialManager(signal_manager=signal_manager)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        test_mappings = {
            "TEMP": SignalMapping("temperature", SignalType.FLOAT),
            "STATUS": SignalMapping("status", SignalType.STRING),
            "ERROR": SignalMapping("error", SignalType.INT),
            "MODE": SignalMapping("mode", SignalType.BOOL)
        }
        signal_manager.register_signals(test_mappings)
        
        print("‚úÖ SerialManager —Å–æ–∑–¥–∞–Ω —Å SignalManager")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ SerialManager
        test_data = [
            "TEMP:25.5",
            "STATUS:running",
            "ERROR:0",
            "MODE:true",
            "UNKNOWN:value",  # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            "TEMP:invalid",   # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            "STATUS:stopped"
        ]
        
        print("üì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö...")
        
        for data in test_data:
            print(f"   –û–±—Ä–∞–±–æ—Ç–∫–∞: {data}")
            result = serial_manager.process_signal_data(data)
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ' if result else '‚ùå'}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = serial_manager.get_signal_statistics()
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ SerialManager:")
        print(f"   - –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {stats.get('total_signals', 0)}")
        print(f"   - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats.get('processed_signals', 0)}")
        print(f"   - –û—à–∏–±–æ–∫: {stats.get('errors', 0)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SerialManager: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_ui_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏"""
    print("\nüß™ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏...")
    
    try:
        from PySide6.QtWidgets import QApplication
        from core.signal_manager import SignalManager
        from core.signal_processor import SignalProcessor
        from core.signal_validator import SignalValidator
        from core.flag_manager import FlagManager
        from config.config_loader import ConfigLoader
        from ui.pages.signals_page import SignalsPage
        
        # –°–æ–∑–¥–∞–Ω–∏–µ QApplication
        app = QApplication.instance()
        if app is None:
            app = QApplication(sys.argv)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        flag_manager = FlagManager()
        signal_processor = SignalProcessor()
        signal_validator = SignalValidator()
        signal_manager = SignalManager(
            processor=signal_processor,
            validator=signal_validator,
            flag_manager=flag_manager
        )
        config_loader = ConfigLoader()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–∏–≥–Ω–∞–ª–æ–≤
        signals_page = SignalsPage(signal_manager, flag_manager, config_loader)
        signals_page.show()
        
        print("‚úÖ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        test_signals = [
            ("TEMP", "temperature", "25.5"),
            ("STATUS", "device_status", "running"),
            ("ERROR", "error_code", "0"),
            ("PRESSURE", "pressure", "1.2"),
            ("MODE", "operation_mode", "auto")
        ]
        
        print("üì° –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ UI...")
        
        # –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        for signal_name, variable_name, value in test_signals:
            print(f"   –°–∏–≥–Ω–∞–ª: {signal_name} -> {variable_name} = {value}")
            signals_page.on_signal_processed(signal_name, variable_name, value)
            time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        
        print("‚úÖ UI —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app.quit()
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è UI: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_configuration_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\nüß™ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        from config.config_loader import ConfigLoader
        from core.signal_types import SignalType, SignalMapping
        
        # –°–æ–∑–¥–∞–Ω–∏–µ ConfigLoader
        config_loader = ConfigLoader()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        signal_mappings = config_loader.get_signal_mappings()
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {len(signal_mappings)}")
        
        # –í—ã–≤–æ–¥ —Ç–µ–∫—É—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        for signal_name, mapping in signal_mappings.items():
            print(f"   {signal_name}: {mapping.variable_name} ({mapping.signal_type.value})")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        test_mapping = SignalMapping("test_variable", SignalType.FLOAT)
        signal_mappings["TEST_SIGNAL"] = test_mapping
        
        print(f"\nüìù –î–æ–±–∞–≤–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª: TEST_SIGNAL")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        success = config_loader.save_signal_mappings()
        if success:
            print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_error_handling_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    print("\nüß™ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
    
    try:
        from core.signal_manager import SignalManager
        from core.signal_processor import SignalProcessor
        from core.signal_validator import SignalValidator
        from core.flag_manager import FlagManager
        from core.signal_types import SignalType, SignalMapping
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        flag_manager = FlagManager()
        signal_processor = SignalProcessor()
        signal_validator = SignalValidator()
        signal_manager = SignalManager(
            processor=signal_processor,
            validator=signal_validator,
            flag_manager=flag_manager
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        test_mappings = {
            "TEMP": SignalMapping("temperature", SignalType.FLOAT),
            "STATUS": SignalMapping("status", SignalType.STRING),
            "ERROR": SignalMapping("error", SignalType.INT),
            "MODE": SignalMapping("mode", SignalType.BOOL)
        }
        signal_manager.register_signals(test_mappings)
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
        error_cases = [
            ("", "–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞"),
            ("INVALID", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"),
            ("TEMP:not_a_number", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–ª—è float"),
            ("MODE:maybe", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–ª—è bool"),
            ("ERROR:abc", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–ª—è int"),
            ("UNKNOWN:value", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∏–≥–Ω–∞–ª"),
            ("TEMP:25.5:extra", "–õ–∏—à–Ω–∏–µ —á–∞—Å—Ç–∏"),
            ("  TEMP:25.5  ", "–ü—Ä–æ–±–µ–ª—ã"),
            ("temp:25.5", "–°—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã")
        ]
        
        print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
        
        initial_stats = signal_manager.get_statistics()
        initial_errors = initial_stats.get('errors', 0)
        
        for data, description in error_cases:
            print(f"   –¢–µ—Å—Ç: {description}")
            print(f"   –î–∞–Ω–Ω—ã–µ: '{data}'")
            
            result = signal_manager.process_incoming_data(data)
            if not result:
                print(f"   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞")
            else:
                print(f"   ‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –ø—Ä–∏–Ω—è—Ç–æ")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫
        final_stats = signal_manager.get_statistics()
        final_errors = final_stats.get('errors', 0)
        new_errors = final_errors - initial_errors
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫:")
        print(f"   - –ù–∞—á–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏: {initial_errors}")
        print(f"   - –ù–æ–≤—ã–µ –æ—à–∏–±–∫–∏: {new_errors}")
        print(f"   - –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {final_errors}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫: {e}")
        import traceback
        traceback.print_exc()
        return False

def run_integration_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ UART...")
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤
    tests = [
        ("–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏", test_full_signal_processing_cycle),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SerialManager", test_serial_manager_integration),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å UI", test_ui_integration),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π", test_configuration_integration),
        ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫", test_error_handling_integration)
    ]
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
    results = {}
    
    for test_name, test_func in tests:
        print(f"\n{'='*60}")
        print(f"üß™ {test_name}")
        print(f"{'='*60}")
        
        start_time = time.time()
        success = test_func()
        end_time = time.time()
        
        results[test_name] = {
            'success': success,
            'duration': end_time - start_time
        }
        
        if success:
            print(f"‚úÖ {test_name} - –£–°–ü–ï–®–ù–û ({end_time - start_time:.2f}—Å)")
        else:
            print(f"‚ùå {test_name} - –ù–ï–£–î–ê–ß–ê ({end_time - start_time:.2f}—Å)")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{'='*60}")
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–• –¢–ï–°–¢–û–í")
    print(f"{'='*60}")
    
    successful_tests = sum(1 for result in results.values() if result['success'])
    total_tests = len(results)
    total_time = sum(result['duration'] for result in results.values())
    
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {successful_tests}/{total_tests}")
    print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f}—Å")
    
    for test_name, result in results.items():
        status = "‚úÖ" if result['success'] else "‚ùå"
        print(f"{status} {test_name}: {result['duration']:.2f}—Å")
    
    if successful_tests == total_tests:
        print(f"\nüéâ –í—Å–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üöÄ –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ UART –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        return True
    else:
        print(f"\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        return False

if __name__ == "__main__":
    success = run_integration_tests()
    sys.exit(0 if success else 1)
