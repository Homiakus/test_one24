"""
@file: performance_benchmark.py
@description: –ë–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
@dependencies: core.sequences.optimized_*, time, statistics
@created: 2024-12-19
"""

import time
import statistics
from typing import Dict, List, Tuple, Any
from dataclasses import dataclass
from collections import defaultdict

from core.sequences.optimized_validator import OptimizedCommandValidator
from core.sequences.optimized_expander import OptimizedSequenceExpander
from core.sequences.optimized_searcher import OptimizedSequenceSearcher
from core.sequences.optimized_manager import OptimizedSequenceManager


@dataclass
class BenchmarkResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–Ω—á–º–∞—Ä–∫–∞"""
    operation: str
    iterations: int
    total_time: float
    avg_time: float
    min_time: float
    max_time: float
    std_dev: float
    throughput: float  # –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —Å–µ–∫—É–Ω–¥—É


class PerformanceBenchmark:
    """
    –ë–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    """
    
    def __init__(self):
        self.validator = OptimizedCommandValidator()
        self.expander = OptimizedSequenceExpander()
        self.searcher = OptimizedSequenceSearcher()
        self.manager = OptimizedSequenceManager()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.test_commands = self._generate_test_commands()
        self.test_sequences = self._generate_test_sequences()
        self.test_buttons = self._generate_test_buttons()
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–µ–Ω—á–º–∞—Ä–∫–æ–≤
        self.results: List[BenchmarkResult] = []
    
    def run_all_benchmarks(self, iterations: int = 1000) -> Dict[str, Any]:
        """
        –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –±–µ–Ω—á–º–∞—Ä–∫–æ–≤
        
        Args:
            iterations: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤—Å–µ—Ö –±–µ–Ω—á–º–∞—Ä–∫–æ–≤
        """
        print(f"üöÄ –ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ({iterations} –∏—Ç–µ—Ä–∞—Ü–∏–π)")
        print("=" * 60)
        
        # –ë–µ–Ω—á–º–∞—Ä–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        self._benchmark_validation(iterations)
        
        # –ë–µ–Ω—á–º–∞—Ä–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        self._benchmark_expansion(iterations)
        
        # –ë–µ–Ω—á–º–∞—Ä–∫ –ø–æ–∏—Å–∫–∞
        self._benchmark_search(iterations)
        
        # –ë–µ–Ω—á–º–∞—Ä–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        self._benchmark_manager(iterations)
        
        # –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
        summary = self._generate_summary()
        
        print("\n" + "=" * 60)
        print("üìä –°–í–û–î–ù–´–ô –û–¢–ß–ï–¢")
        print("=" * 60)
        self._print_summary(summary)
        
        return summary
    
    def _benchmark_validation(self, iterations: int):
        """–ë–µ–Ω—á–º–∞—Ä–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥"""
        print("\nüîç –ë–µ–Ω—á–º–∞—Ä–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥...")
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ wait –∫–æ–º–∞–Ω–¥
        times = []
        for i in range(iterations):
            start_time = time.perf_counter()
            self.validator.validate_command(f"wait {i % 100}.5")
            end_time = time.perf_counter()
            times.append(end_time - start_time)
        
        result = self._calculate_benchmark_result("validation_wait", iterations, times)
        self.results.append(result)
        self._print_benchmark_result(result)
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ if –∫–æ–º–∞–Ω–¥
        times = []
        for i in range(iterations):
            start_time = time.perf_counter()
            self.validator.validate_command(f"if flag_{i % 50}")
            end_time = time.perf_counter()
            times.append(end_time - start_time)
        
        result = self._calculate_benchmark_result("validation_if", iterations, times)
        self.results.append(result)
        self._print_benchmark_result(result)
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
        times = []
        for i in range(iterations):
            commands = [f"wait {i % 10}.0", f"if flag_{i % 20}", "test_command", "endif"]
            start_time = time.perf_counter()
            self.validator.validate_sequence(commands)
            end_time = time.perf_counter()
            times.append(end_time - start_time)
        
        result = self._calculate_benchmark_result("validation_sequence", iterations, times)
        self.results.append(result)
        self._print_benchmark_result(result)
    
    def _benchmark_expansion(self, iterations: int):
        """–ë–µ–Ω—á–º–∞—Ä–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π"""
        print("\nüìà –ë–µ–Ω—á–º–∞—Ä–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π...")
        
        # –¢–µ—Å—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ø—Ä–æ—Å—Ç—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
        times = []
        for i in range(iterations):
            start_time = time.perf_counter()
            self.expander.expand_sequence("seq1", self.test_sequences, self.test_buttons)
            end_time = time.perf_counter()
            times.append(end_time - start_time)
        
        result = self._calculate_benchmark_result("expansion_simple", iterations, times)
        self.results.append(result)
        self._print_benchmark_result(result)
        
        # –¢–µ—Å—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
        times = []
        for i in range(iterations):
            start_time = time.perf_counter()
            self.expander.expand_sequence("seq3", self.test_sequences, self.test_buttons)
            end_time = time.perf_counter()
            times.append(end_time - start_time)
        
        result = self._calculate_benchmark_result("expansion_complex", iterations, times)
        self.results.append(result)
        self._print_benchmark_result(result)
    
    def _benchmark_search(self, iterations: int):
        """–ë–µ–Ω—á–º–∞—Ä–∫ –ø–æ–∏—Å–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π"""
        print("\nüîé –ë–µ–Ω—á–º–∞—Ä–∫ –ø–æ–∏—Å–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π...")
        
        # –°—Ç—Ä–æ–∏–º –∏–Ω–¥–µ–∫—Å
        self.searcher.build_index(self.test_sequences, self.test_buttons)
        
        # –¢–µ—Å—Ç —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
        times = []
        for i in range(iterations):
            start_time = time.perf_counter()
            self.searcher.search_sequences(f"seq{i % len(self.test_sequences)}", "exact")
            end_time = time.perf_counter()
            times.append(end_time - start_time)
        
        result = self._calculate_benchmark_result("search_exact", iterations, times)
        self.results.append(result)
        self._print_benchmark_result(result)
        
        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        times = []
        for i in range(iterations):
            start_time = time.perf_counter()
            self.searcher.search_sequences("command", "contains")
            end_time = time.perf_counter()
            times.append(end_time - start_time)
        
        result = self._calculate_benchmark_result("search_contains", iterations, times)
        self.results.append(result)
        self._print_benchmark_result(result)
        
        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–∏–ø—É
        times = []
        for i in range(iterations):
            start_time = time.perf_counter()
            self.searcher.search_by_command_type("REGULAR")
            end_time = time.perf_counter()
            times.append(end_time - start_time)
        
        result = self._calculate_benchmark_result("search_by_type", iterations, times)
        self.results.append(result)
        self._print_benchmark_result(result)
    
    def _benchmark_manager(self, iterations: int):
        """–ë–µ–Ω—á–º–∞—Ä–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π"""
        print("\n‚öôÔ∏è –ë–µ–Ω—á–º–∞—Ä–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π...")
        
        # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
        times = []
        for i in range(iterations):
            commands = [f"wait {i % 10}.0", f"command_{i}"]
            start_time = time.perf_counter()
            self.manager.add_sequence(f"benchmark_seq_{i}", commands)
            end_time = time.perf_counter()
            times.append(end_time - start_time)
        
        result = self._calculate_benchmark_result("manager_add", iterations, times)
        self.results.append(result)
        self._print_benchmark_result(result)
        
        # –¢–µ—Å—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä
        times = []
        for i in range(iterations):
            start_time = time.perf_counter()
            self.manager.expand_sequence(f"benchmark_seq_{i % 100}")
            end_time = time.perf_counter()
            times.append(end_time - start_time)
        
        result = self._calculate_benchmark_result("manager_expand", iterations, times)
        self.results.append(result)
        self._print_benchmark_result(result)
        
        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä
        times = []
        for i in range(iterations):
            start_time = time.perf_counter()
            self.manager.search_sequences(f"command_{i % 100}")
            end_time = time.perf_counter()
            times.append(end_time - start_time)
        
        result = self._calculate_benchmark_result("manager_search", iterations, times)
        self.results.append(result)
        self._print_benchmark_result(result)
    
    def _calculate_benchmark_result(self, operation: str, iterations: int, times: List[float]) -> BenchmarkResult:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±–µ–Ω—á–º–∞—Ä–∫–∞"""
        total_time = sum(times)
        avg_time = total_time / iterations
        min_time = min(times)
        max_time = max(times)
        std_dev = statistics.stdev(times) if len(times) > 1 else 0.0
        throughput = iterations / total_time if total_time > 0 else 0.0
        
        return BenchmarkResult(
            operation=operation,
            iterations=iterations,
            total_time=total_time,
            avg_time=avg_time,
            min_time=min_time,
            max_time=max_time,
            std_dev=std_dev,
            throughput=throughput
        )
    
    def _generate_summary(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        summary = {
            'total_operations': sum(r.iterations for r in self.results),
            'total_time': sum(r.total_time for r in self.results),
            'operations': {}
        }
        
        for result in self.results:
            summary['operations'][result.operation] = {
                'iterations': result.iterations,
                'total_time': result.total_time,
                'avg_time': result.avg_time,
                'throughput': result.throughput
            }
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if summary['total_time'] > 0:
            summary['overall_throughput'] = summary['total_operations'] / summary['total_time']
        else:
            summary['overall_throughput'] = 0.0
        
        return summary
    
    def _print_benchmark_result(self, result: BenchmarkResult):
        """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±–µ–Ω—á–º–∞—Ä–∫–∞"""
        print(f"  {result.operation:20} | "
              f"{result.avg_time*1000:8.3f}ms | "
              f"{result.throughput:8.0f} ops/s | "
              f"{result.total_time:6.3f}s total")
    
    def _print_summary(self, summary: Dict[str, Any]):
        """–í—ã–≤–æ–¥ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {summary['total_operations']:,}")
        print(f"–û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {summary['total_time']:.3f} —Å–µ–∫—É–Ω–¥")
        print(f"–û–±—â–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {summary['overall_throughput']:.0f} –æ–ø–µ—Ä–∞—Ü–∏–π/—Å–µ–∫")
        
        print("\n–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º:")
        print("-" * 60)
        print(f"{'–û–ø–µ—Ä–∞—Ü–∏—è':20} | {'–ò—Ç–µ—Ä–∞—Ü–∏–∏':>10} | {'–í—Ä–µ–º—è (—Å)':>10} | {'–ü—Ä–æ–∏–∑–≤-—Ç—å':>12}")
        print("-" * 60)
        
        for op_name, op_data in summary['operations'].items():
            print(f"{op_name:20} | "
                  f"{op_data['iterations']:10,} | "
                  f"{op_data['total_time']:10.3f} | "
                  f"{op_data['throughput']:12.0f} ops/s")
    
    def _generate_test_commands(self) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥"""
        commands = []
        
        # Wait –∫–æ–º–∞–Ω–¥—ã
        for i in range(100):
            commands.append(f"wait {i % 50}.5")
        
        # If –∫–æ–º–∞–Ω–¥—ã
        for i in range(50):
            commands.append(f"if flag_{i}")
        
        # –ú—É–ª—å—Ç–∏–∑–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        for i in range(30):
            commands.append(f"og_multizone-command_{i}")
        
        # –û–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        for i in range(200):
            commands.append(f"command_{i}")
        
        return commands
    
    def _generate_test_sequences(self) -> Dict[str, List[str]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π"""
        sequences = {
            "seq1": ["wait 1.0", "command1", "command2"],
            "seq2": ["seq1", "wait 2.0", "command3"],
            "seq3": ["seq2", "if flag1", "command4", "endif", "command5"],
            "seq4": ["seq3", "og_multizone-test", "wait 0.5"],
            "seq5": ["seq4", "seq1", "command6"]
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        for i in range(20):
            sequences[f"simple_seq_{i}"] = [f"command_{i}", f"wait {i % 5}.0"]
        
        return sequences
    
    def _generate_test_buttons(self) -> Dict[str, str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∫–Ω–æ–ø–æ–∫"""
        buttons = {}
        
        for i in range(10):
            buttons[f"button_{i}"] = f"button_command_{i}"
        
        return buttons
    
    def run_memory_benchmark(self) -> Dict[str, Any]:
        """–ë–µ–Ω—á–º–∞—Ä–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        print("\nüíæ –ë–µ–Ω—á–º–∞—Ä–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏...")
        
        import psutil
        import gc
        
        process = psutil.Process()
        
        # –ò–∑–º–µ—Ä—è–µ–º –±–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
        gc.collect()
        base_memory = process.memory_info().rss / 1024 / 1024  # MB
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ä–æ—Å—Ç–∞ –ø–∞–º—è—Ç–∏
        for i in range(1000):
            self.validator.validate_command(f"wait {i % 100}.0")
            self.expander.expand_sequence("seq1", self.test_sequences, self.test_buttons)
            self.searcher.search_sequences("command", "contains")
        
        # –ò–∑–º–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–π
        gc.collect()
        final_memory = process.memory_info().rss / 1024 / 1024  # MB
        
        memory_result = {
            'base_memory_mb': base_memory,
            'final_memory_mb': final_memory,
            'memory_increase_mb': final_memory - base_memory,
            'memory_increase_percent': ((final_memory - base_memory) / base_memory * 100) if base_memory > 0 else 0
        }
        
        print(f"  –ë–∞–∑–æ–≤–∞—è –ø–∞–º—è—Ç—å: {base_memory:.1f} MB")
        print(f"  –ü–∞–º—è—Ç—å –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–π: {final_memory:.1f} MB")
        print(f"  –£–≤–µ–ª–∏—á–µ–Ω–∏–µ: {memory_result['memory_increase_mb']:.1f} MB ({memory_result['memory_increase_percent']:.1f}%)")
        
        return memory_result
    
    def run_cache_efficiency_benchmark(self) -> Dict[str, Any]:
        """–ë–µ–Ω—á–º–∞—Ä–∫ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–µ—à–∞"""
        print("\nüìä –ë–µ–Ω—á–º–∞—Ä–∫ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–µ—à–∞...")
        
        # –û—á–∏—â–∞–µ–º –∫–µ—à–∏
        self.validator.clear_cache()
        self.expander.clear_cache()
        self.searcher.clear_cache()
        
        # –ü–µ—Ä–≤—ã–π –ø—Ä–æ—Ö–æ–¥ - –±–µ–∑ –∫–µ—à–∞
        start_time = time.perf_counter()
        for i in range(100):
            self.validator.validate_command(f"wait {i % 50}.0")
            self.expander.expand_sequence("seq1", self.test_sequences, self.test_buttons)
            self.searcher.search_sequences("command", "contains")
        first_pass_time = time.perf_counter() - start_time
        
        # –í—Ç–æ—Ä–æ–π –ø—Ä–æ—Ö–æ–¥ - —Å –∫–µ—à–µ–º
        start_time = time.perf_counter()
        for i in range(100):
            self.validator.validate_command(f"wait {i % 50}.0")
            self.expander.expand_sequence("seq1", self.test_sequences, self.test_buttons)
            self.searcher.search_sequences("command", "contains")
        second_pass_time = time.perf_counter() - start_time
        
        # –í—ã—á–∏—Å–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–µ—à–∞
        cache_efficiency = {
            'first_pass_time': first_pass_time,
            'second_pass_time': second_pass_time,
            'time_improvement': first_pass_time - second_pass_time,
            'improvement_percent': ((first_pass_time - second_pass_time) / first_pass_time * 100) if first_pass_time > 0 else 0,
            'cache_hit_rate': self._calculate_cache_hit_rate()
        }
        
        print(f"  –í—Ä–µ–º—è –±–µ–∑ –∫–µ—à–∞: {first_pass_time:.3f} —Å–µ–∫")
        print(f"  –í—Ä–µ–º—è —Å –∫–µ—à–µ–º: {second_pass_time:.3f} —Å–µ–∫")
        print(f"  –£–ª—É—á—à–µ–Ω–∏–µ: {cache_efficiency['time_improvement']:.3f} —Å–µ–∫ ({cache_efficiency['improvement_percent']:.1f}%)")
        
        return cache_efficiency
    
    def _calculate_cache_hit_rate(self) -> float:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ hit rate –∫–µ—à–∞"""
        validator_stats = self.validator.get_cache_stats()
        expander_stats = self.expander.get_cache_stats()
        searcher_stats = self.searcher.get_cache_stats()
        
        total_hits = (
            validator_stats.get('cache_hits', 0) +
            expander_stats.get('cache_hits', 0) +
            searcher_stats.get('cache_hits', 0)
        )
        
        total_requests = (
            validator_stats.get('cache_misses', 0) +
            expander_stats.get('cache_misses', 0) +
            searcher_stats.get('cache_misses', 0)
        ) + total_hits
        
        if total_requests > 0:
            return (total_hits / total_requests) * 100
        else:
            return 0.0


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤"""
    benchmark = PerformanceBenchmark()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –±–µ–Ω—á–º–∞—Ä–∫–∏
    summary = benchmark.run_all_benchmarks(iterations=1000)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–µ–Ω—á–º–∞—Ä–∫–∏
    memory_result = benchmark.run_memory_benchmark()
    cache_result = benchmark.run_cache_efficiency_benchmark()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results = {
        'performance_summary': summary,
        'memory_benchmark': memory_result,
        'cache_efficiency': cache_result
    }
    
    print("\nüéâ –ë–µ–Ω—á–º–∞—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π 'results'")
    
    return results


if __name__ == "__main__":
    main()
