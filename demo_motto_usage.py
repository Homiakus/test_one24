#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è MOTTO –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—É—é MOTTO –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–π,
–º–µ–Ω—é –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
"""

import tomli
from core.motto import MOTTOParser


class MOTTOController:
    """–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å MOTTO –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
    
    def __init__(self, config_file='config_motto_fixed.toml'):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞"""
        self.parser = MOTTOParser()
        self.config = self.parser.parse_config(config_file)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–∫–∂–µ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π TOML –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        with open(config_file, 'rb') as f:
            self.toml_config = tomli.load(f)
        
        print(f"‚úÖ MOTTO –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–≤–µ—Ä—Å–∏—è {self.config.version})")
    
    def get_serial_settings(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Serial"""
        serial = self.toml_config['serial_default']
        return {
            'port': serial['port'],
            'baudrate': serial['baudrate'],
            'timeout': serial['timeout']
        }
    
    def get_wizard_menu(self, step_id=1):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–Ω—é wizard"""
        wizard = self.toml_config['wizard']
        for step in wizard['step']:
            if step['id'] == step_id:
                return {
                    'title': step['title'],
                    'buttons': step['buttons'],
                    'sequence': step['sequence'],
                    'autoNext': step['autoNext']
                }
        return None
    
    def execute_command(self, command_name):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
        commands = self.toml_config['commands']
        if command_name in commands:
            command = commands[command_name]
            print(f"üîß –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É '{command_name}': {command}")
            # –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Ä–µ–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ UART
            return True
        else:
            print(f"‚ùå –ö–æ–º–∞–Ω–¥–∞ '{command_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
    
    def execute_sequence(self, sequence_name):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        sequences = self.toml_config['sequences']
        if sequence_name in sequences:
            sequence = sequences[sequence_name]
            steps = sequence['steps']
            policy = sequence['policy']
            guards = sequence['guards']
            
            print(f"üöÄ –í—ã–ø–æ–ª–Ω—è—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å '{sequence_name}'")
            print(f"   –ü–æ–ª–∏—Ç–∏–∫–∞: {policy}")
            print(f"   –ì–≤–∞—Ä–¥—ã: {guards}")
            print(f"   –®–∞–≥–∏: {len(steps)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–≤–∞—Ä–¥—ã (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π)
            print("   üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–≤–∞—Ä–¥–æ–≤...")
            for guard in guards:
                print(f"     ‚úÖ {guard}: OK")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–≥–∏
            for i, step in enumerate(steps, 1):
                print(f"   üìã –®–∞–≥ {i}: {step}")
                if step.startswith('wait '):
                    wait_time = int(step.split()[1])
                    print(f"     ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥...")
                else:
                    self.execute_command(step)
            
            print(f"‚úÖ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å '{sequence_name}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            return True
        else:
            print(f"‚ùå –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å '{sequence_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
    
    def show_main_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        menu = self.get_wizard_menu(1)
        if menu:
            print(f"\nüìã {menu['title']}")
            print("=" * 50)
            for i, button in enumerate(menu['buttons'], 1):
                print(f"{i}. {button['text']}")
            print("0. –í—ã—Ö–æ–¥")
            return menu
        return None
    
    def handle_menu_choice(self, choice, menu):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤ –º–µ–Ω—é"""
        if choice == 0:
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            return False
        
        if 1 <= choice <= len(menu['buttons']):
            button = menu['buttons'][choice - 1]
            next_step = button['next']
            
            print(f"üéØ –í—ã–±—Ä–∞–Ω–æ: {button['text']}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
            next_menu = self.get_wizard_menu(next_step)
            if next_menu and next_menu['sequence']:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                self.execute_sequence(next_menu['sequence'])
            
            return True
        
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        return True
    
    def list_available_commands(self):
        """–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
        commands = self.toml_config['commands']
        print(f"\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ({len(commands)}):")
        print("=" * 50)
        for name, command in commands.items():
            print(f"  {name}: {command}")
    
    def list_available_sequences(self):
        """–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π"""
        sequences = self.toml_config['sequences']
        print(f"\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ({len(sequences)}):")
        print("=" * 50)
        for name, sequence in sequences.items():
            steps = sequence['steps']
            policy = sequence['policy']
            print(f"  {name}: {len(steps)} —à–∞–≥–æ–≤, –ø–æ–ª–∏—Ç–∏–∫–∞: {policy}")
    
    def get_system_info(self):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ"""
        print(f"\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:")
        print("=" * 50)
        print(f"  –í–µ—Ä—Å–∏—è MOTTO: {self.config.version}")
        print(f"  –ö–æ–º–∞–Ω–¥: {len(self.toml_config['commands'])}")
        print(f"  –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π: {len(self.toml_config['sequences'])}")
        print(f"  –£—Å–ª–æ–≤–∏–π: {len(self.config.conditions)}")
        print(f"  –ì–≤–∞—Ä–¥–æ–≤: {len(self.config.guards)}")
        print(f"  –ü–æ–ª–∏—Ç–∏–∫: {len(self.config.policies)}")
        print(f"  –†–µ—Å—É—Ä—Å–æ–≤: {len(self.config.resources)}")
        print(f"  –°–æ–±—ã—Ç–∏–π: {len(self.config.events)}")
        print(f"  –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {len(self.config.handlers)}")
        
        # Serial –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        serial = self.get_serial_settings()
        print(f"  Serial –ø–æ—Ä—Ç: {serial['port']}")
        print(f"  –°–∫–æ—Ä–æ—Å—Ç—å: {serial['baudrate']}")
        print(f"  –¢–∞–π–º–∞—É—Ç: {serial['timeout']}—Å")


def interactive_demo():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è"""
    print("üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø MOTTO –ö–û–ù–¢–†–û–õ–õ–ï–†–ê")
    print("=" * 60)
    
    controller = MOTTOController()
    
    while True:
        print("\n" + "=" * 60)
        print("üìã –í–´–ë–ï–†–ò–¢–ï –î–ï–ô–°–¢–í–ò–ï:")
        print("1. –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        print("2. –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É")
        print("3. –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        print("4. –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")
        print("5. –°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π")
        print("6. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")
        print("0. –í—ã—Ö–æ–¥")
        
        try:
            choice = int(input("\n–í–∞—à –≤—ã–±–æ—Ä: "))
            
            if choice == 0:
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            elif choice == 1:
                menu = controller.show_main_menu()
                if menu:
                    try:
                        menu_choice = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é: "))
                        controller.handle_menu_choice(menu_choice, menu)
                    except ValueError:
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")
            elif choice == 2:
                command = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ–º–∞–Ω–¥—ã: ")
                controller.execute_command(command)
            elif choice == 3:
                sequence = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: ")
                controller.execute_sequence(sequence)
            elif choice == 4:
                controller.list_available_commands()
            elif choice == 5:
                controller.list_available_sequences()
            elif choice == 6:
                controller.get_system_info()
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
                
        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")
        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break


def quick_demo():
    """–ë—ã—Å—Ç—Ä–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è"""
    print("üöÄ –ë–´–°–¢–†–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø MOTTO")
    print("=" * 50)
    
    controller = MOTTOController()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
    controller.get_system_info()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    print("\n" + "=" * 50)
    controller.show_main_menu()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥
    print("\n" + "=" * 50)
    print("üîß –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ö–û–ú–ê–ù–î:")
    controller.execute_command('multi_og')
    controller.execute_command('pump_on')
    controller.execute_command('kl1_on')
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    print("\n" + "=" * 50)
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–ò:")
    controller.execute_sequence('load_tubes')
    
    print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


if __name__ == '__main__':
    import sys
    
    if len(sys.argv) > 1 and sys.argv[1] == '--interactive':
        interactive_demo()
    else:
        quick_demo()