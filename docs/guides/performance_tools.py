#!/usr/bin/env python3
"""
–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º.
"""

import sys
import time
import json
import cProfile
import pstats
import psutil
import threading
import tracemalloc
from pathlib import Path
from typing import Dict, List, Optional, Callable
from collections import defaultdict
from datetime import datetime
import argparse

try:
    from PyQt6.QtCore import QTimer, QElapsedTimer, QObject, pyqtSignal
    from PyQt6.QtWidgets import QApplication, QWidget, QVBoxLayout, QPushButton, QLabel
    PYQT6_AVAILABLE = True
except ImportError:
    PYQT6_AVAILABLE = False
    print("PyQt6 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã")


class PerformanceMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self):
        self.metrics = {}
        self.start_time = None
        self.monitoring = False
        self.monitor_thread = None
        self.metrics_data = defaultdict(list)
        self.lock = threading.Lock()
    
    def start_measurement(self, name: str):
        """–ù–∞—á–∞—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–µ"""
        self.start_time = time.time()
        self.metrics[name] = {
            'start_time': self.start_time,
            'cpu_start': psutil.cpu_percent(),
            'memory_start': psutil.Process().memory_info().rss
        }
    
    def end_measurement(self, name: str) -> dict:
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–µ –∏ –≤–µ—Ä–Ω—É—Ç—å –º–µ—Ç—Ä–∏–∫–∏"""
        if name not in self.metrics:
            return {}
        
        end_time = time.time()
        cpu_end = psutil.cpu_percent()
        memory_end = psutil.Process().memory_info().rss
        
        result = {
            'duration': end_time - self.metrics[name]['start_time'],
            'cpu_usage': cpu_end - self.metrics[name]['cpu_start'],
            'memory_usage': memory_end - self.metrics[name]['memory_start']
        }
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        with self.lock:
            self.metrics_data[name].append({
                'timestamp': time.time(),
                **result
            })
        
        return result
    
    def start_monitoring(self, interval: float = 1.0):
        """–ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.monitoring = True
        self.monitor_thread = threading.Thread(target=self._monitor_loop, args=(interval,))
        self.monitor_thread.daemon = True
        self.monitor_thread.start()
    
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.monitoring = False
        if self.monitor_thread:
            self.monitor_thread.join()
    
    def _monitor_loop(self, interval: float):
        """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while self.monitoring:
            with self.lock:
                self.metrics_data['system'].append({
                    'timestamp': time.time(),
                    'cpu_percent': psutil.cpu_percent(),
                    'memory_percent': psutil.virtual_memory().percent,
                    'memory_used': psutil.virtual_memory().used,
                    'disk_io': psutil.disk_io_counters()._asdict() if psutil.disk_io_counters() else {}
                })
            
            time.sleep(interval)
    
    def get_metric_stats(self, name: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–µ—Ç—Ä–∏–∫–∏"""
        with self.lock:
            values = self.metrics_data[name]
            if not values:
                return {}
            
            durations = [m.get('duration', 0) for m in values if 'duration' in m]
            if durations:
                return {
                    'count': len(durations),
                    'min': min(durations),
                    'max': max(durations),
                    'avg': sum(durations) / len(durations),
                    'latest': durations[-1] if durations else None
                }
            
            return {'count': len(values)}
    
    def save_metrics(self, filename: str = "performance_metrics.json"):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤ —Ñ–∞–π–ª"""
        with self.lock:
            data = {
                'timestamp': datetime.now().isoformat(),
                'metrics': dict(self.metrics_data)
            }
        
        with open(filename, 'w') as f:
            json.dump(data, f, indent=2, default=str)
        
        print(f"–ú–µ—Ç—Ä–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")


class Profiler:
    """–ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        self.profiler = None
        self.stats_file = None
    
    def start_profiling(self):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        self.profiler = cProfile.Profile()
        self.profiler.enable()
        print("–ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
    
    def stop_profiling(self, stats_file: str = "profile_stats.prof"):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        if not self.profiler:
            print("–ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ")
            return
        
        self.profiler.disable()
        self.stats_file = stats_file
        self.profiler.dump_stats(stats_file)
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {stats_file}")
    
    def print_stats(self, top_n: int = 20):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not self.stats_file:
            print("–ù–µ—Ç —Ñ–∞–π–ª–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            return
        
        stats = pstats.Stats(self.stats_file)
        stats.sort_stats('cumulative')
        stats.print_stats(top_n)
    
    def profile_function(self, func: Callable, *args, **kwargs):
        """–ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"""
        profiler = cProfile.Profile()
        profiler.enable()
        
        result = func(*args, **kwargs)
        
        profiler.disable()
        
        # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = pstats.Stats(profiler)
        stats.sort_stats('cumulative')
        stats.print_stats(10)
        
        return result


class MemoryProfiler:
    """–ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤—â–∏–∫ –ø–∞–º—è—Ç–∏"""
    
    def __init__(self):
        self.tracemalloc_started = False
    
    def start_tracking(self):
        """–ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏"""
        tracemalloc.start()
        self.tracemalloc_started = True
        print("–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –∑–∞–ø—É—â–µ–Ω–æ")
    
    def stop_tracking(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏"""
        if not self.tracemalloc_started:
            print("–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ")
            return
        
        current, peak = tracemalloc.get_traced_memory()
        print(f"–¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {current / 1024 / 1024:.1f} MB")
        print(f"–ü–∏–∫–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {peak / 1024 / 1024:.1f} MB")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø-10 –±–ª–æ–∫–æ–≤ –ø–∞–º—è—Ç–∏
        snapshot = tracemalloc.take_snapshot()
        top_stats = snapshot.statistics('lineno')
        
        print("\n–¢–æ–ø-10 –±–ª–æ–∫–æ–≤ –ø–∞–º—è—Ç–∏:")
        for stat in top_stats[:10]:
            print(stat)
        
        tracemalloc.stop()
        self.tracemalloc_started = False
    
    def take_snapshot(self):
        """–°–æ–∑–¥–∞—Ç—å —Å–Ω–∏–º–æ–∫ –ø–∞–º—è—Ç–∏"""
        if not self.tracemalloc_started:
            print("–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ")
            return None
        
        return tracemalloc.take_snapshot()


class PerformanceAlerts:
    """–°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self, monitor: PerformanceMonitor):
        self.monitor = monitor
        self.thresholds = {
            'cpu_usage': 80.0,
            'memory_usage': 500 * 1024 * 1024,  # 500MB
            'response_time': 1000,  # 1s
        }
        self.alert_callbacks = []
    
    def add_alert_callback(self, callback: Callable):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ callback –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤"""
        self.alert_callbacks.append(callback)
    
    def check_alerts(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤"""
        for metric_name, threshold in self.thresholds.items():
            stats = self.monitor.get_metric_stats(metric_name)
            if stats and stats.get('latest', 0) > threshold:
                self._trigger_alert(metric_name, stats['latest'], threshold)
    
    def _trigger_alert(self, metric: str, value: float, threshold: float):
        """–°—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞"""
        alert = {
            'metric': metric,
            'value': value,
            'threshold': threshold,
            'timestamp': time.time()
        }
        
        print(f"üö® –ê–õ–ï–†–¢: {metric} = {value} (–ø–æ—Ä–æ–≥: {threshold})")
        
        for callback in self.alert_callbacks:
            callback(alert)


if PYQT6_AVAILABLE:
    class UIPerformanceMonitor(QObject):
        """–ú–æ–Ω–∏—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ UI"""
        
        def __init__(self):
            super().__init__()
            self.timer = QElapsedTimer()
            self.measurements = []
        
        def measure_ui_operation(self, operation_name: str):
            """–ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è UI –æ–ø–µ—Ä–∞—Ü–∏–∏"""
            def decorator(func):
                def wrapper(*args, **kwargs):
                    self.timer.start()
                    result = func(*args, **kwargs)
                    elapsed = self.timer.elapsed()
                    
                    self.measurements.append({
                        'operation': operation_name,
                        'time': elapsed
                    })
                    
                    if elapsed > 100:  # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö
                        print(f"‚ö†Ô∏è –ú–µ–¥–ª–µ–Ω–Ω–∞—è UI –æ–ø–µ—Ä–∞—Ü–∏—è: {operation_name} - {elapsed}ms")
                    
                    return result
                return wrapper
            return decorator


class PerformanceBenchmark:
    """–ë–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self):
        self.monitor = PerformanceMonitor()
        self.results = {}
    
    def benchmark_function(self, name: str, func: Callable, *args, iterations: int = 100, **kwargs):
        """–ë–µ–Ω—á–º–∞—Ä–∫ —Ñ—É–Ω–∫—Ü–∏–∏"""
        print(f"–ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–∞: {name}")
        
        times = []
        for i in range(iterations):
            self.monitor.start_measurement(f"{name}_iter_{i}")
            start_time = time.time()
            
            result = func(*args, **kwargs)
            
            end_time = time.time()
            self.monitor.end_measurement(f"{name}_iter_{i}")
            
            times.append(end_time - start_time)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        avg_time = sum(times) / len(times)
        min_time = min(times)
        max_time = max(times)
        
        self.results[name] = {
            'iterations': iterations,
            'avg_time': avg_time,
            'min_time': min_time,
            'max_time': max_time,
            'total_time': sum(times)
        }
        
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã {name}:")
        print(f"  –ò—Ç–µ—Ä–∞—Ü–∏–π: {iterations}")
        print(f"  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.6f}s")
        print(f"  –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {min_time:.6f}s")
        print(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {max_time:.6f}s")
        print(f"  –û–±—â–µ–µ –≤—Ä–µ–º—è: {sum(times):.6f}s")
    
    def save_results(self, filename: str = "benchmark_results.json"):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–µ–Ω—á–º–∞—Ä–∫–∞"""
        with open(filename, 'w') as f:
            json.dump(self.results, f, indent=2, default=str)
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–µ–Ω—á–º–∞—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")


def demo_performance_tools():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∞
    monitor = PerformanceMonitor()
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏—è
    print("\n1. –ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏:")
    monitor.start_measurement("demo_function")
    
    def demo_function():
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
        time.sleep(0.1)
        return "done"
    
    result = demo_function()
    metrics = monitor.end_measurement("demo_function")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    print(f"–ú–µ—Ç—Ä–∏–∫–∏: {metrics}")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    print("\n2. –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
    profiler = Profiler()
    profiler.profile_function(demo_function)
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–µ–Ω—á–º–∞—Ä–∫–∞
    print("\n3. –ë–µ–Ω—á–º–∞—Ä–∫ —Ñ—É–Ω–∫—Ü–∏–∏:")
    benchmark = PerformanceBenchmark()
    benchmark.benchmark_function("demo_function", demo_function, iterations=10)
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    print("\n4. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã (5 —Å–µ–∫—É–Ω–¥):")
    monitor.start_monitoring(interval=0.5)
    time.sleep(5)
    monitor.stop_monitoring()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    monitor.save_metrics("demo_metrics.json")
    benchmark.save_results("demo_benchmark.json")
    
    print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    parser.add_argument("--demo", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é")
    parser.add_argument("--monitor", type=int, default=0, help="–í—Ä–µ–º—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")
    parser.add_argument("--profile", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ")
    parser.add_argument("--benchmark", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–µ–Ω—á–º–∞—Ä–∫")
    
    args = parser.parse_args()
    
    if args.demo:
        demo_performance_tools()
    elif args.monitor > 0:
        monitor = PerformanceMonitor()
        print(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã –≤ —Ç–µ—á–µ–Ω–∏–µ {args.monitor} —Å–µ–∫—É–Ω–¥...")
        monitor.start_monitoring()
        time.sleep(args.monitor)
        monitor.stop_monitoring()
        monitor.save_metrics()
    elif args.profile:
        profiler = Profiler()
        profiler.start_profiling()
        print("–ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            profiler.stop_profiling()
            profiler.print_stats()
    elif args.benchmark:
        benchmark = PerformanceBenchmark()
        
        # –ë–µ–Ω—á–º–∞—Ä–∫ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        def test_function():
            return sum(range(1000))
        
        benchmark.benchmark_function("test_function", test_function, iterations=1000)
        benchmark.save_results()
    else:
        parser.print_help()


if __name__ == "__main__":
    main()
