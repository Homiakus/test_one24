#!/usr/bin/env python3
"""
–ú–∞—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º

–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã.
–ü–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±—ã—Å—Ç—Ä–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å.
"""

import sys
import os
import subprocess
import importlib
import json
import time
from pathlib import Path
from typing import Dict, List, Optional, Tuple
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('setup_wizard.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)


class SetupWizard:
    """–ú–∞—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent.parent.parent
        self.results = {
            'python_version': None,
            'dependencies': {},
            'serial_ports': [],
            'config_files': {},
            'tests_passed': [],
            'issues': []
        }
        
    def print_header(self):
        """–í—ã–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –º–∞—Å—Ç–µ—Ä–∞"""
        print("=" * 80)
        print("üöÄ –ú–ê–°–¢–ï–† –ù–ê–°–¢–†–û–ô–ö–ò –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –£–°–¢–†–û–ô–°–¢–í–û–ú")
        print("=" * 80)
        print("–≠—Ç–æ—Ç –º–∞—Å—Ç–µ—Ä –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")
        print("–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.\n")
    
    def check_python_version(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python...")
        
        version = sys.version_info
        self.results['python_version'] = f"{version.major}.{version.minor}.{version.micro}"
        
        if version.major == 3 and version.minor >= 8:
            print(f"‚úÖ Python {self.results['python_version']} - –ø–æ–¥—Ö–æ–¥—è—â–∞—è –≤–µ—Ä—Å–∏—è")
            return True
        else:
            print(f"‚ùå Python {self.results['python_version']} - —Ç—Ä–µ–±—É–µ—Ç—Å—è Python 3.8+")
            self.results['issues'].append("–ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∞—è –≤–µ—Ä—Å–∏—è Python")
            return False
    
    def check_dependencies(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        required_packages = [
            'PyQt6',
            'serial',
            'qt_material',
            'tomli',
            'gitpython',
            'psutil'
        ]
        
        all_installed = True
        
        for package in required_packages:
            try:
                importlib.import_module(package)
                print(f"‚úÖ {package} - —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                self.results['dependencies'][package] = True
            except ImportError:
                print(f"‚ùå {package} - –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                self.results['dependencies'][package] = False
                all_installed = False
                self.results['issues'].append(f"–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–∞–∫–µ—Ç: {package}")
        
        if not all_installed:
            print("\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
            response = input("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏? (y/n): ").lower()
            
            if response == 'y':
                return self.install_dependencies()
            else:
                print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–æ–ø—É—â–µ–Ω–∞")
                return False
        
        return True
    
    def install_dependencies(self) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        print("\nüì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        try:
            requirements_file = self.project_root / "requirements.txt"
            if requirements_file.exists():
                subprocess.check_call([
                    sys.executable, "-m", "pip", "install", "-r", str(requirements_file)
                ])
                print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                print("‚ùå –§–∞–π–ª requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
            return False
    
    def check_serial_ports(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö Serial –ø–æ—Ä—Ç–æ–≤"""
        print("\nüîå –ü—Ä–æ–≤–µ—Ä–∫–∞ Serial –ø–æ—Ä—Ç–æ–≤...")
        
        try:
            import serial.tools.list_ports
            ports = list(serial.tools.list_ports.comports())
            
            if ports:
                print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ—Ä—Ç—ã:")
                for port in ports:
                    print(f"  - {port.device}: {port.description}")
                    self.results['serial_ports'].append({
                        'device': port.device,
                        'description': port.description
                    })
                return True
            else:
                print("‚ö†Ô∏è  Serial –ø–æ—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                self.results['issues'].append("Serial –ø–æ—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False
        except ImportError:
            print("‚ùå –ú–æ–¥—É–ª—å serial –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
    
    def check_config_files(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        print("\n‚öôÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
        
        config_files = [
            'resources/config.toml',
            'resources/di_config.toml',
            'serial_settings.json'
        ]
        
        all_exist = True
        
        for config_file in config_files:
            file_path = self.project_root / config_file
            if file_path.exists():
                print(f"‚úÖ {config_file} - –Ω–∞–π–¥–µ–Ω")
                self.results['config_files'][config_file] = True
            else:
                print(f"‚ùå {config_file} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
                self.results['config_files'][config_file] = False
                all_exist = False
                self.results['issues'].append(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_file}")
        
        return all_exist
    
    def test_application_startup(self) -> bool:
        """–¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        print("\nüöÄ –¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
            sys.path.insert(0, str(self.project_root))
            
            # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
            modules_to_test = [
                'main',
                'ui.main_window',
                'core.serial_manager',
                'config.config_loader'
            ]
            
            for module in modules_to_test:
                try:
                    importlib.import_module(module)
                    print(f"‚úÖ {module} - –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
                    self.results['tests_passed'].append(f"–ò–º–ø–æ—Ä—Ç {module}")
                except ImportError as e:
                    print(f"‚ùå {module} - –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
                    self.results['issues'].append(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ {module}: {e}")
                    return False
            
            print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            self.results['issues'].append(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False
    
    def create_sample_config(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–∑—Ü–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–∑—Ü–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        
        try:
            config_dir = self.project_root / "resources"
            config_dir.mkdir(exist_ok=True)
            
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            sample_config = """# –û–±—Ä–∞–∑–µ—Ü –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
[serial_default]
port = "COM4"
baudrate = 115200
timeout = 1.0

[buttons]
"–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥–∞" = "status"
"–•–æ–º–∏–Ω–≥" = "home 1 1 1 0 0"

[sequences]
test_sequence = ["status", "home 1 1 1 0 0", "wait 2"]
"""
            
            config_file = config_dir / "config_sample.toml"
            with open(config_file, 'w', encoding='utf-8') as f:
                f.write(sample_config)
            
            print(f"‚úÖ –û–±—Ä–∞–∑–µ—Ü –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω: {config_file}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    def run_quick_tests(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("\nüß™ –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤...")
        
        try:
            # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            from core.serial_manager import SerialManager
            from config.config_loader import ConfigLoader
            
            # –¢–µ—Å—Ç SerialManager
            serial_manager = SerialManager()
            print("‚úÖ SerialManager —Å–æ–∑–¥–∞–Ω")
            self.results['tests_passed'].append("–°–æ–∑–¥–∞–Ω–∏–µ SerialManager")
            
            # –¢–µ—Å—Ç ConfigLoader
            config_loader = ConfigLoader()
            print("‚úÖ ConfigLoader —Å–æ–∑–¥–∞–Ω")
            self.results['tests_passed'].append("–°–æ–∑–¥–∞–Ω–∏–µ ConfigLoader")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤: {e}")
            self.results['issues'].append(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤: {e}")
            return False
    
    def generate_setup_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ"""
        print("\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")
        
        report = {
            'timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),
            'python_version': self.results['python_version'],
            'dependencies_status': self.results['dependencies'],
            'serial_ports_found': len(self.results['serial_ports']),
            'config_files_status': self.results['config_files'],
            'tests_passed': len(self.results['tests_passed']),
            'issues_found': len(self.results['issues']),
            'overall_status': 'SUCCESS' if not self.results['issues'] else 'ISSUES_FOUND',
            'details': self.results
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_file = self.project_root / "setup_report.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        return report
    
    def print_summary(self, report: Dict):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "=" * 80)
        print("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        print("=" * 80)
        
        print(f"Python –≤–µ—Ä—Å–∏—è: {report['python_version']}")
        print(f"–ù–∞–π–¥–µ–Ω–æ Serial –ø–æ—Ä—Ç–æ–≤: {report['serial_ports_found']}")
        print(f"–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {report['tests_passed']}")
        print(f"–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {report['issues_found']}")
        
        if report['issues_found'] > 0:
            print(f"\n‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–´:")
            for issue in self.results['issues']:
                print(f"  - {issue}")
        
        print(f"\nüìä –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {report['overall_status']}")
        
        if report['overall_status'] == 'SUCCESS':
            print("\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π: python main.py")
        else:
            print("\n‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        self.print_header()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
        checks = [
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ Python", self.check_python_version),
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", self.check_dependencies),
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ Serial –ø–æ—Ä—Ç–æ–≤", self.check_serial_ports),
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", self.check_config_files),
            ("–¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞", self.test_application_startup),
            ("–ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã", self.run_quick_tests),
        ]
        
        for check_name, check_func in checks:
            try:
                if not check_func():
                    print(f"‚ùå {check_name} –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
                    response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É? (y/n): ").lower()
                    if response != 'y':
                        break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ {check_name}: {e}")
                self.results['issues'].append(f"–û—à–∏–±–∫–∞ –≤ {check_name}: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–∑–µ—Ü –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not self.results['config_files'].get('resources/config.toml', False):
            self.create_sample_config()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = self.generate_setup_report()
        self.print_summary(report)
        
        return report['overall_status'] == 'SUCCESS'


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        wizard = SetupWizard()
        success = wizard.run()
        
        if success:
            print("\nüéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
            print("1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ resources/config.toml")
            print("2. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∫ Serial –ø–æ—Ä—Ç—É")
            print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: python main.py")
            print("4. –ò–∑—É—á–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –≤ docs/")
        else:
            print("\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            print("1. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
            print("2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
            print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")
            print("4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∞—Å—Ç–µ—Ä —Å–Ω–æ–≤–∞")
        
        return 0 if success else 1
        
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –º–∞—Å—Ç–µ—Ä–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}", exc_info=True)
        return 1


if __name__ == "__main__":
    sys.exit(main())
