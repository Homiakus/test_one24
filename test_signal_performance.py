#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ UART
"""

import sys
import time
import random
import threading
from pathlib import Path
from typing import Dict, List

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

def test_high_volume_signal_processing():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    print("üß™ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–æ–≤...")
    
    try:
        from core.signal_manager import SignalManager
        from core.signal_processor import SignalProcessor
        from core.signal_validator import SignalValidator
        from core.flag_manager import FlagManager
        from core.signal_types import SignalType, SignalMapping
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        flag_manager = FlagManager()
        signal_processor = SignalProcessor()
        signal_validator = SignalValidator()
        signal_manager = SignalManager(
            processor=signal_processor,
            validator=signal_validator,
            flag_manager=flag_manager
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        test_mappings = {
            "TEMP": SignalMapping("temperature", SignalType.FLOAT),
            "STATUS": SignalMapping("status", SignalType.STRING),
            "ERROR": SignalMapping("error", SignalType.INT),
            "MODE": SignalMapping("mode", SignalType.BOOL),
            "PRESSURE": SignalMapping("pressure", SignalType.FLOAT),
            "FLOW": SignalMapping("flow_rate", SignalType.FLOAT),
            "LEVEL": SignalMapping("level", SignalType.INT),
            "ALARM": SignalMapping("alarm", SignalType.BOOL)
        }
        signal_manager.register_signals(test_mappings)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        test_data = [
            "TEMP:25.5",
            "STATUS:running",
            "ERROR:0",
            "MODE:true",
            "PRESSURE:1.2",
            "FLOW:10.5",
            "LEVEL:75",
            "ALARM:false",
            "TEMP:26.1",
            "STATUS:stopped",
            "ERROR:1",
            "MODE:false",
            "PRESSURE:1.3",
            "FLOW:11.2",
            "LEVEL:80",
            "ALARM:true"
        ]
        
        # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ 10000 —Å–∏–≥–Ω–∞–ª–æ–≤
        print("üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ 10000 —Å–∏–≥–Ω–∞–ª–æ–≤...")
        start_time = time.time()
        
        for i in range(10000):
            data = test_data[i % len(test_data)]
            signal_manager.process_incoming_data(data)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 1000 —Å–∏–≥–Ω–∞–ª–æ–≤
            if (i + 1) % 1000 == 0:
                elapsed = time.time() - start_time
                rate = (i + 1) / elapsed
                print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {i + 1}, –°–∫–æ—Ä–æ—Å—Ç—å: {rate:.0f} —Å–∏–≥–Ω–∞–ª–æ–≤/—Å–µ–∫")
        
        end_time = time.time()
        processing_time = end_time - start_time
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω:")
        print(f"   - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: 10000")
        print(f"   - –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.3f} —Å–µ–∫")
        print(f"   - –°–∫–æ—Ä–æ—Å—Ç—å: {10000/processing_time:.0f} —Å–∏–≥–Ω–∞–ª–æ–≤/—Å–µ–∫")
        print(f"   - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Å–∏–≥–Ω–∞–ª: {processing_time/10000*1000:.3f} –º—Å")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = signal_manager.get_statistics()
        print(f"   - –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {stats.get('total_signals', 0)}")
        print(f"   - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats.get('processed_signals', 0)}")
        print(f"   - –û—à–∏–±–æ–∫: {stats.get('errors', 0)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_concurrent_signal_processing():
    """–¢–µ—Å—Ç –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤...")
    
    try:
        from core.signal_manager import SignalManager
        from core.signal_processor import SignalProcessor
        from core.signal_validator import SignalValidator
        from core.flag_manager import FlagManager
        from core.signal_types import SignalType, SignalMapping
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        flag_manager = FlagManager()
        signal_processor = SignalProcessor()
        signal_validator = SignalValidator()
        signal_manager = SignalManager(
            processor=signal_processor,
            validator=signal_validator,
            flag_manager=flag_manager
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        test_mappings = {
            "TEMP": SignalMapping("temperature", SignalType.FLOAT),
            "STATUS": SignalMapping("status", SignalType.STRING),
            "ERROR": SignalMapping("error", SignalType.INT),
            "MODE": SignalMapping("mode", SignalType.BOOL)
        }
        signal_manager.register_signals(test_mappings)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        test_data = [
            "TEMP:25.5",
            "STATUS:running",
            "ERROR:0",
            "MODE:true",
            "TEMP:26.1",
            "STATUS:stopped",
            "ERROR:1",
            "MODE:false"
        ]
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        thread_results = {}
        
        def process_signals(thread_id: int, num_signals: int):
            """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –ø–æ—Ç–æ–∫–µ"""
            start_time = time.time()
            for i in range(num_signals):
                data = test_data[i % len(test_data)]
                signal_manager.process_incoming_data(data)
            end_time = time.time()
            thread_results[thread_id] = {
                'signals_processed': num_signals,
                'processing_time': end_time - start_time
            }
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤
        threads = []
        num_threads = 4
        signals_per_thread = 1000
        
        print(f"üìä –ó–∞–ø—É—Å–∫ {num_threads} –ø–æ—Ç–æ–∫–æ–≤ –ø–æ {signals_per_thread} —Å–∏–≥–Ω–∞–ª–æ–≤...")
        
        start_time = time.time()
        
        for i in range(num_threads):
            thread = threading.Thread(
                target=process_signals,
                args=(i, signals_per_thread)
            )
            threads.append(thread)
            thread.start()
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
        for thread in threads:
            thread.join()
        
        end_time = time.time()
        total_time = end_time - start_time
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"‚úÖ –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω:")
        print(f"   - –ü–æ—Ç–æ–∫–æ–≤: {num_threads}")
        print(f"   - –°–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –ø–æ—Ç–æ–∫: {signals_per_thread}")
        print(f"   - –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.3f} —Å–µ–∫")
        print(f"   - –û–±—â–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {num_threads * signals_per_thread / total_time:.0f} —Å–∏–≥–Ω–∞–ª–æ–≤/—Å–µ–∫")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ—Ç–æ–∫–∞–º
        for thread_id, result in thread_results.items():
            rate = result['signals_processed'] / result['processing_time']
            print(f"   - –ü–æ—Ç–æ–∫ {thread_id}: {rate:.0f} —Å–∏–≥–Ω–∞–ª–æ–≤/—Å–µ–∫")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = signal_manager.get_statistics()
        print(f"   - –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {stats.get('total_signals', 0)}")
        print(f"   - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats.get('processed_signals', 0)}")
        print(f"   - –û—à–∏–±–æ–∫: {stats.get('errors', 0)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_malformed_data_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüß™ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from core.signal_manager import SignalManager
        from core.signal_processor import SignalProcessor
        from core.signal_validator import SignalValidator
        from core.flag_manager import FlagManager
        from core.signal_types import SignalType, SignalMapping
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        flag_manager = FlagManager()
        signal_processor = SignalProcessor()
        signal_validator = SignalValidator()
        signal_manager = SignalManager(
            processor=signal_processor,
            validator=signal_validator,
            flag_manager=flag_manager
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        test_mappings = {
            "TEMP": SignalMapping("temperature", SignalType.FLOAT),
            "STATUS": SignalMapping("status", SignalType.STRING),
            "ERROR": SignalMapping("error", SignalType.INT),
            "MODE": SignalMapping("mode", SignalType.BOOL)
        }
        signal_manager.register_signals(test_mappings)
        
        # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        malformed_data = [
            "",  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
            "INVALID",  # –ù–µ—Ç –¥–≤–æ–µ—Ç–æ—á–∏—è
            "TEMP",  # –¢–æ–ª—å–∫–æ –∏–º—è —Å–∏–≥–Ω–∞–ª–∞
            ":25.5",  # –¢–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–µ
            "TEMP:25.5:extra",  # –õ–∏—à–Ω–∏–µ —á–∞—Å—Ç–∏
            "UNKNOWN:value",  # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            "TEMP:not_a_number",  # –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–ª—è float
            "MODE:maybe",  # –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–ª—è bool
            "ERROR:abc",  # –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–ª—è int
            "TEMP:25.5\n",  # –° –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫–∏
            "  TEMP:25.5  ",  # –° –ø—Ä–æ–±–µ–ª–∞–º–∏
            "temp:25.5",  # –°—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã
            "TEMP:25.5,STATUS:running",  # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        ]
        
        print("üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        initial_stats = signal_manager.get_statistics()
        initial_errors = initial_stats.get('errors', 0)
        
        for i, data in enumerate(malformed_data):
            print(f"   –¢–µ—Å—Ç {i+1}: '{data}'")
            result = signal_manager.process_incoming_data(data)
            if not result:
                print(f"     ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
            else:
                print(f"     ‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –ø—Ä–∏–Ω—è—Ç–æ")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        final_stats = signal_manager.get_statistics()
        final_errors = final_stats.get('errors', 0)
        new_errors = final_errors - initial_errors
        
        print(f"‚úÖ –¢–µ—Å—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω:")
        print(f"   - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {len(malformed_data)}")
        print(f"   - –ù–æ–≤—ã—Ö –æ—à–∏–±–æ–∫: {new_errors}")
        print(f"   - –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {final_errors}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_memory_usage():
    """–¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
    print("\nüß™ –¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏...")
    
    try:
        import psutil
        import os
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        process = psutil.Process(os.getpid())
        initial_memory = process.memory_info().rss / 1024 / 1024  # MB
        
        from core.signal_manager import SignalManager
        from core.signal_processor import SignalProcessor
        from core.signal_validator import SignalValidator
        from core.flag_manager import FlagManager
        from core.signal_types import SignalType, SignalMapping
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        flag_manager = FlagManager()
        signal_processor = SignalProcessor()
        signal_validator = SignalValidator()
        signal_manager = SignalManager(
            processor=signal_processor,
            validator=signal_validator,
            flag_manager=flag_manager
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        test_mappings = {
            "TEMP": SignalMapping("temperature", SignalType.FLOAT),
            "STATUS": SignalMapping("status", SignalType.STRING),
            "ERROR": SignalMapping("error", SignalType.INT),
            "MODE": SignalMapping("mode", SignalType.BOOL)
        }
        signal_manager.register_signals(test_mappings)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        test_data = [
            "TEMP:25.5",
            "STATUS:running",
            "ERROR:0",
            "MODE:true"
        ]
        
        print("üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏...")
        
        for i in range(10000):
            data = test_data[i % len(test_data)]
            signal_manager.process_incoming_data(data)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å –∫–∞–∂–¥—ã–µ 1000 —Å–∏–≥–Ω–∞–ª–æ–≤
            if (i + 1) % 1000 == 0:
                current_memory = process.memory_info().rss / 1024 / 1024
                memory_increase = current_memory - initial_memory
                print(f"   –°–∏–≥–Ω–∞–ª–æ–≤: {i + 1}, –ü–∞–º—è—Ç—å: {current_memory:.1f}MB (+{memory_increase:.1f}MB)")
        
        final_memory = process.memory_info().rss / 1024 / 1024
        total_increase = final_memory - initial_memory
        
        print(f"‚úÖ –¢–µ—Å—Ç –ø–∞–º—è—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω:")
        print(f"   - –ù–∞—á–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å: {initial_memory:.1f}MB")
        print(f"   - –ö–æ–Ω–µ—á–Ω–∞—è –ø–∞–º—è—Ç—å: {final_memory:.1f}MB")
        print(f"   - –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏: {total_increase:.1f}MB")
        print(f"   - –ü–∞–º—è—Ç—å –Ω–∞ 1000 —Å–∏–≥–Ω–∞–ª–æ–≤: {total_increase/10:.1f}MB")
        
        return True
        
    except ImportError:
        print("‚ö†Ô∏è  psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ø–∞–º—è—Ç–∏")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

def run_performance_benchmark():
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –±–µ–Ω—á–º–∞—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –±–µ–Ω—á–º–∞—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã —Å–∏–≥–Ω–∞–ª–æ–≤...")
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤
    tests = [
        ("–í—ã—Å–æ–∫–æ–Ω–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞", test_high_volume_signal_processing),
        ("–ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞", test_concurrent_signal_processing),
        ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", test_malformed_data_handling),
        ("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏", test_memory_usage)
    ]
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
    results = {}
    
    for test_name, test_func in tests:
        print(f"\n{'='*60}")
        print(f"üß™ {test_name}")
        print(f"{'='*60}")
        
        start_time = time.time()
        success = test_func()
        end_time = time.time()
        
        results[test_name] = {
            'success': success,
            'duration': end_time - start_time
        }
        
        if success:
            print(f"‚úÖ {test_name} - –£–°–ü–ï–®–ù–û ({end_time - start_time:.2f}—Å)")
        else:
            print(f"‚ùå {test_name} - –ù–ï–£–î–ê–ß–ê ({end_time - start_time:.2f}—Å)")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{'='*60}")
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print(f"{'='*60}")
    
    successful_tests = sum(1 for result in results.values() if result['success'])
    total_tests = len(results)
    total_time = sum(result['duration'] for result in results.values())
    
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {successful_tests}/{total_tests}")
    print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f}—Å")
    
    for test_name, result in results.items():
        status = "‚úÖ" if result['success'] else "‚ùå"
        print(f"{status} {test_name}: {result['duration']:.2f}—Å")
    
    if successful_tests == total_tests:
        print(f"\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print(f"\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        return False

if __name__ == "__main__":
    success = run_performance_benchmark()
    sys.exit(0 if success else 1)
