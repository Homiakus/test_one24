"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ç–µ–≥–æ–≤ –∫–æ–º–∞–Ω–¥
"""
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from core.tag_manager import TagManager
from core.tag_validator import TagValidator
from core.flag_manager import FlagManager
from core.tags.wanted_tag import WantedTag
from ui.dialogs.tag_dialogs import TagDialogManager


def test_basic_tag_functionality():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–≥–æ–≤"""
    print("=== –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–≥–æ–≤ ===")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    tag_manager = TagManager()
    flag_manager = FlagManager()
    
    # –¢–µ—Å—Ç 1: –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ —Ç–µ–≥–æ–≤
    print("1. –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ —Ç–µ–≥–æ–≤")
    result = tag_manager.parse_command("simple_command")
    print(f"   –ë–∞–∑–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞: {result.base_command}")
    print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–≥–æ–≤: {len(result.tags)}")
    print(f"   –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {result.original_command}")
    
    # –¢–µ—Å—Ç 2: –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–∞–Ω–¥—ã —Å —Ç–µ–≥–æ–º _wanted
    print("\n2. –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–∞–Ω–¥—ã —Å —Ç–µ–≥–æ–º _wanted")
    result = tag_manager.parse_command("test_command_wanted")
    print(f"   –ë–∞–∑–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞: {result.base_command}")
    print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–≥–æ–≤: {len(result.tags)}")
    if result.tags:
        print(f"   –ü–µ—Ä–≤—ã–π —Ç–µ–≥: {result.tags[0].tag_name}")
        print(f"   –¢–∏–ø —Ç–µ–≥–∞: {result.tags[0].tag_type}")
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–µ–≥–æ–≤
    print("\n3. –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Ç–µ–≥–æ–≤")
    print(f"   'command_wanted' —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–≥–∏: {tag_manager._has_tags('command_wanted')}")
    print(f"   'simple_command' —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–≥–∏: {tag_manager._has_tags('simple_command')}")
    
    print("\n‚úÖ –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–≥–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


def test_wanted_tag_processing():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–≥–∞ _wanted"""
    print("\n=== –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–≥–∞ _wanted ===")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    tag_manager = TagManager()
    flag_manager = FlagManager()
    wanted_tag = WantedTag()
    
    # –¢–µ—Å—Ç 1: wanted=False
    print("1. –¢–µ—Å—Ç —Å wanted=False")
    flag_manager.set_flag('wanted', False)
    tag_info = tag_manager.parse_command("test_command_wanted").tags[0]
    context = {"flag_manager": flag_manager}
    
    result = wanted_tag.process(tag_info, context)
    print(f"   –£—Å–ø–µ—Ö: {result.success}")
    print(f"   –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å: {result.should_continue}")
    print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {result.message}")
    
    # –¢–µ—Å—Ç 2: wanted=True
    print("\n2. –¢–µ—Å—Ç —Å wanted=True")
    flag_manager.set_flag('wanted', True)
    result = wanted_tag.process(tag_info, context)
    print(f"   –£—Å–ø–µ—Ö: {result.success}")
    print(f"   –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å: {result.should_continue}")
    print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {result.message}")
    print(f"   –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥: {result.data.get('show_dialog') if result.data else 'None'}")
    
    print("\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–≥–∞ _wanted —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


def test_flag_manager():
    """–¢–µ—Å—Ç FlagManager"""
    print("\n=== –¢–µ—Å—Ç FlagManager ===")
    
    flag_manager = FlagManager()
    
    # –¢–µ—Å—Ç 1: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–ª–∞–≥–æ–≤
    print("1. –¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–ª–∞–≥–æ–≤")
    flag_manager.set_flag('test_flag', True)
    flag_manager.set_flag('counter', 42)
    flag_manager.set_flag('message', "Hello World")
    
    print(f"   test_flag: {flag_manager.get_flag('test_flag')}")
    print(f"   counter: {flag_manager.get_flag('counter')}")
    print(f"   message: {flag_manager.get_flag('message')}")
    print(f"   nonexistent: {flag_manager.get_flag('nonexistent', 'default')}")
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–ª–∞–≥–æ–≤
    print("\n2. –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Ñ–ª–∞–≥–æ–≤")
    print(f"   test_flag —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {flag_manager.has_flag('test_flag')}")
    print(f"   nonexistent —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {flag_manager.has_flag('nonexistent')}")
    
    # –¢–µ—Å—Ç 3: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ñ–ª–∞–≥–∞
    print("\n3. –¢–µ—Å—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ñ–ª–∞–≥–∞")
    flag_manager.set_flag('toggle_flag', False)
    print(f"   –ò—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {flag_manager.get_flag('toggle_flag')}")
    new_value = flag_manager.toggle_flag('toggle_flag')
    print(f"   –ü–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è: {new_value}")
    new_value = flag_manager.toggle_flag('toggle_flag')
    print(f"   –ï—â–µ —Ä–∞–∑ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏: {new_value}")
    
    # –¢–µ—Å—Ç 4: –£–≤–µ–ª–∏—á–µ–Ω–∏–µ/—É–º–µ–Ω—å—à–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
    print("\n4. –¢–µ—Å—Ç —É–≤–µ–ª–∏—á–µ–Ω–∏—è/—É–º–µ–Ω—å—à–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞")
    flag_manager.set_flag('counter', 10)
    print(f"   –ò—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {flag_manager.get_flag('counter')}")
    new_value = flag_manager.increment_flag('counter', 5)
    print(f"   –ü–æ—Å–ª–µ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –Ω–∞ 5: {new_value}")
    new_value = flag_manager.decrement_flag('counter', 3)
    print(f"   –ü–æ—Å–ª–µ —É–º–µ–Ω—å—à–µ–Ω–∏—è –Ω–∞ 3: {new_value}")
    
    # –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–ª–∞–≥–æ–≤
    print("\n5. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ–ª–∞–≥–æ–≤")
    all_flags = flag_manager.get_all_flags()
    print(f"   –í—Å–µ —Ñ–ª–∞–≥–∏: {all_flags}")
    
    print("\n‚úÖ FlagManager —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


def test_tag_validator():
    """–¢–µ—Å—Ç TagValidator"""
    print("\n=== –¢–µ—Å—Ç TagValidator ===")
    
    validator = TagValidator()
    
    # –¢–µ—Å—Ç 1: –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω —Ç–µ–≥–æ–≤
    print("1. –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–º–µ–Ω —Ç–µ–≥–æ–≤")
    valid_names = ["_wanted", "_test_tag", "_tag123"]
    invalid_names = ["wanted", "_", "_123tag"]
    
    for name in valid_names:
        result = validator.validate_tag_name(name)
        print(f"   '{name}' –≤–∞–ª–∏–¥–Ω–æ: {result}")
    
    for name in invalid_names:
        result = validator.validate_tag_name(name)
        print(f"   '{name}' –≤–∞–ª–∏–¥–Ω–æ: {result}")
    
    # –¢–µ—Å—Ç 2: –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ —Å —Ç–µ–≥–∞–º–∏
    print("\n2. –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ —Å —Ç–µ–≥–∞–º–∏")
    commands = ["command_wanted", "simple_command", "command_invalid"]
    
    for command in commands:
        result = validator.validate_command_with_tags(command)
        print(f"   '{command}' –≤–∞–ª–∏–¥–Ω–∞: {result}")
    
    print("\n‚úÖ TagValidator —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


def test_tag_dialog_manager():
    """–¢–µ—Å—Ç TagDialogManager"""
    print("\n=== –¢–µ—Å—Ç TagDialogManager ===")
    
    dialog_manager = TagDialogManager()
    
    # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤
    print("1. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤")
    supported_types = dialog_manager.get_supported_dialog_types()
    print(f"   –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã: {supported_types}")
    
    # –¢–µ—Å—Ç 2: –¢–µ—Å—Ç –ø–æ–∫–∞–∑–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
    print("\n2. –¢–µ—Å—Ç –ø–æ–∫–∞–∑–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞")
    result = dialog_manager.show_tag_dialog('unknown')
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∫–∞–∑–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞: {result}")
    
    print("\n‚úÖ TagDialogManager —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


def test_full_workflow():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ workflow"""
    print("\n=== –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ workflow ===")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    tag_manager = TagManager()
    flag_manager = FlagManager()
    dialog_manager = TagDialogManager()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ wanted=True
    print("1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ wanted=True")
    flag_manager.set_flag('wanted', True)
    print(f"   wanted = {flag_manager.get_flag('wanted')}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É —Å —Ç–µ–≥–æ–º
    print("\n2. –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É —Å —Ç–µ–≥–æ–º")
    command = "test_command_wanted"
    print(f"   –ö–æ–º–∞–Ω–¥–∞: {command}")
    
    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
    print("\n3. –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É")
    parsed = tag_manager.parse_command(command)
    print(f"   –ë–∞–∑–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞: {parsed.base_command}")
    print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–≥–æ–≤: {len(parsed.tags)}")
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–µ–≥–∏
    print("\n4. –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–µ–≥–∏")
    validator = TagValidator()
    is_valid = validator.validate_tags(parsed.tags)
    print(f"   –¢–µ–≥–∏ –≤–∞–ª–∏–¥–Ω—ã: {is_valid}")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–≥–∏
    print("\n5. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–≥–∏")
    context = {"flag_manager": flag_manager}
    results = tag_manager.process_tags(parsed.tags, context)
    
    print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
    if results:
        result = results[0]
        print(f"   –£—Å–ø–µ—Ö: {result.success}")
        print(f"   –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å: {result.should_continue}")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {result.message}")
        if result.data:
            print(f"   –î–∞–Ω–Ω—ã–µ: {result.data}")
    
    print("\n‚úÖ –ü–æ–ª–Ω—ã–π workflow —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã —Ç–µ–≥–æ–≤ –∫–æ–º–∞–Ω–¥")
    print("=" * 50)
    
    try:
        test_basic_tag_functionality()
        test_wanted_tag_processing()
        test_flag_manager()
        test_tag_validator()
        test_tag_dialog_manager()
        test_full_workflow()
        
        print("\n" + "=" * 50)
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ç–µ–≥–æ–≤ –∫–æ–º–∞–Ω–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    return True


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
