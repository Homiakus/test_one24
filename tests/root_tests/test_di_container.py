"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
"""
import sys
import os
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from core.di_container import DIContainer, register, resolve, get_container
from core.di_config_loader import DIConfigLoader
from core.interfaces import (
    ISerialManager, ICommandExecutor, ISequenceManager, 
    IConfigLoader, ISettingsManager, ILogger
)


def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    logging.basicConfig(
        level=logging.DEBUG,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )


def test_basic_registration():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("\n=== –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ ===")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    container = DIContainer()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    class MockSerialManager:
        def __init__(self):
            self.connected = False
        
        def connect(self, port: str, **kwargs):
            self.connected = True
            return True
        
        def disconnect(self):
            self.connected = False
        
        def send_command(self, command: str):
            return True
        
        def is_connected(self):
            return self.connected
        
        def get_available_ports(self):
            return ["COM1", "COM2", "COM3"]
        
        def get_port_info(self):
            return {"connected": self.connected, "port": "COM1"}
    
    class MockCommandExecutor:
        def __init__(self, serial_manager: MockSerialManager):
            self.serial_manager = serial_manager
        
        def execute(self, command: str, **kwargs):
            return self.serial_manager.send_command(command)
        
        def validate_command(self, command: str):
            return bool(command and command.strip())
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
    container.register(ISerialManager, MockSerialManager)
    container.register(ICommandExecutor, MockCommandExecutor, dependencies={"serial_manager": ISerialManager})
    
    print("–°–µ—Ä–≤–∏—Å—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    # –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    try:
        serial_manager = container.resolve(ISerialManager)
        command_executor = container.resolve(ICommandExecutor)
        
        print(f"SerialManager —Å–æ–∑–¥–∞–Ω: {type(serial_manager).__name__}")
        print(f"CommandExecutor —Å–æ–∑–¥–∞–Ω: {type(command_executor).__name__}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        assert serial_manager.connect("COM1")
        assert serial_manager.is_connected()
        assert command_executor.execute("test command")
        
        print("‚úÖ –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –±–∞–∑–æ–≤—ã—Ö —Ç–µ—Å—Ç–∞—Ö: {e}")
        return False
    
    return True


def test_singleton_behavior():
    """–¢–µ—Å—Ç –ø–æ–≤–µ–¥–µ–Ω–∏—è singleton"""
    print("\n=== –¢–µ—Å—Ç –ø–æ–≤–µ–¥–µ–Ω–∏—è singleton ===")
    
    container = DIContainer()
    
    class SingletonService:
        def __init__(self):
            self.id = id(self)
    
    class TransientService:
        def __init__(self):
            self.id = id(self)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º singleton –∏ transient —Å–µ—Ä–≤–∏—Å—ã
    container.register(ISerialManager, SingletonService, singleton=True)
    container.register(ILogger, TransientService, singleton=False)
    
    # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
    singleton1 = container.resolve(ISerialManager)
    singleton2 = container.resolve(ISerialManager)
    
    transient1 = container.resolve(ILogger)
    transient2 = container.resolve(ILogger)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º singleton
    if singleton1.id == singleton2.id:
        print("‚úÖ Singleton —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("‚ùå Singleton –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º transient
    if transient1.id != transient2.id:
        print("‚úÖ Transient —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("‚ùå Transient –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return False
    
    return True


def test_circular_dependency_detection():
    """–¢–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("\n=== –¢–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ===")
    
    container = DIContainer()
    
    class ServiceA:
        def __init__(self, service_b):
            self.service_b = service_b
    
    class ServiceB:
        def __init__(self, service_a):
            self.service_a = service_a
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã —Å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é
    container.register(ISerialManager, ServiceA, dependencies={"service_b": ICommandExecutor})
    container.register(ICommandExecutor, ServiceB, dependencies={"service_a": ISerialManager})
    
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –≤—ã–∑–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        container.resolve(ISerialManager)
        print("‚ùå –¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")
        return False
    except RuntimeError as e:
        if "—Ü–∏–∫–ª–∏—á–µ—Å–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å" in str(e).lower():
            print("‚úÖ –¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False


def test_config_loader():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\n=== –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ===")
    
    config_path = "resources/di_config.toml"
    
    if not os.path.exists(config_path):
        print(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫
    config_loader = DIConfigLoader()
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    errors = config_loader.validate_config(config_path)
    if errors:
        print(f"‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        for error in errors:
            print(f"  - {error}")
        return False
    
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if config_loader.load_config(config_path):
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        container = config_loader.get_container()
        services = container.get_registered_services()
        print(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã: {services}")
        
        return True
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return False


def test_global_container():
    """–¢–µ—Å—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
    print("\n=== –¢–µ—Å—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ===")
    
    # –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    container = get_container()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å
    class TestService:
        def __init__(self):
            self.name = "TestService"
    
    register(ILogger, TestService)
    
    # –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
    try:
        service = resolve(ILogger)
        print(f"‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç: {service.name}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞")
    
    setup_logging()
    
    tests = [
        test_basic_registration,
        test_singleton_behavior,
        test_circular_dependency_detection,
        test_config_loader,
        test_global_container
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
        except Exception as e:
            print(f"‚ùå –¢–µ—Å—Ç {test.__name__} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º: {e}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
