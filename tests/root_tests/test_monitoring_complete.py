#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
"""

import sys
import os
import time
import threading
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_basic_imports():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã...")
    
    try:
        from monitoring import MonitoringManager, AlertLevel
        from monitoring import PerformanceMonitor, ErrorAlerter, HealthChecker, UsageMetrics
        from utils.logger import Logger
        print("‚úÖ –í—Å–µ –±–∞–∑–æ–≤—ã–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def test_logger_functionality():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ª–æ–≥–≥–µ—Ä–∞"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä...")
    
    try:
        from utils.logger import Logger
        
        # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
        logger = Logger("test_logger")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ —É—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logger.debug("Debug message")
        logger.info("Info message")
        logger.warning("Warning message")
        logger.error("Error message")
        logger.critical("Critical message")
        
        print("‚úÖ –õ–æ–≥–≥–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–≥–µ—Ä–∞: {e}")
        return False

def test_monitoring_components():
    """–¢–µ—Å—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
    
    try:
        from monitoring import MonitoringManager, AlertLevel
        from utils.logger import Logger
        
        logger = Logger("test")
        manager = MonitoringManager(logger)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        assert hasattr(manager, 'performance_monitor')
        assert hasattr(manager, 'error_alerter')
        assert hasattr(manager, 'health_checker')
        assert hasattr(manager, 'usage_metrics')
        
        print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        manager.start_monitoring()
        print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å —Å–æ–±—ã—Ç–∏–π
        manager.record_command_execution("test_cmd", 0.5, True)
        manager.record_page_visit("test_page", 10.0)
        manager.send_alert(AlertLevel.INFO, "Test alert", "test")
        print("‚úÖ –°–æ–±—ã—Ç–∏—è –∑–∞–ø–∏—Å–∞–Ω—ã")
        
        # –ñ–¥–µ–º —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        time.sleep(2)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É
        summary = manager.get_comprehensive_summary(hours=1)
        assert 'performance' in summary
        assert 'alerts' in summary
        assert 'health' in summary
        assert 'usage' in summary
        print("‚úÖ –°–≤–æ–¥–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞")
        
        # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
        manager.export_all_data()
        print("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        manager.stop_monitoring()
        print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_ui_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ UI"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã UI...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è QApplication (–∏–∑–±–µ–≥–∞–µ–º GUI)
        import importlib.util
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
        ui_modules = [
            'ui.pages.monitoring_page',
            'ui.widgets.monitoring_panel',
            'ui.shared.base_classes',
            'ui.shared.mixins',
            'ui.shared.utils'
        ]
        
        for module_name in ui_modules:
            try:
                spec = importlib.util.find_spec(module_name)
                if spec is None:
                    print(f"‚ùå –ú–æ–¥—É–ª—å {module_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False
                print(f"‚úÖ –ú–æ–¥—É–ª—å {module_name} –¥–æ—Å—Ç—É–ø–µ–Ω")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ {module_name}: {e}")
                return False
        
        print("‚úÖ –í—Å–µ UI –º–æ–¥—É–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ UI –∏–º–ø–æ—Ä—Ç–æ–≤: {e}")
        return False

def test_main_window_import():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∞—Å—Å, –Ω–µ —Å–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
        from ui.main_window import MainWindow
        print("‚úÖ MainWindow –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ MainWindow: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    print("=" * 60)
    
    tests = [
        ("–ë–∞–∑–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã", test_basic_imports),
        ("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ª–æ–≥–≥–µ—Ä–∞", test_logger_functionality),
        ("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", test_monitoring_components),
        ("UI –∏–º–ø–æ—Ä—Ç—ã", test_ui_imports),
        ("–ò–º–ø–æ—Ä—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞", test_main_window_import),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}")
        print("-" * 40)
        
        try:
            if test_func():
                passed += 1
            else:
                print(f"‚ùå –¢–µ—Å—Ç '{test_name}' –ø—Ä–æ–≤–∞–ª–µ–Ω")
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            import traceback
            traceback.print_exc()
    
    print("\n" + "=" * 60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        return True
    else:
        print(f"‚ö†Ô∏è  {total - passed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)

