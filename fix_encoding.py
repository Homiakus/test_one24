#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π main.py
–†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É SyntaxError: source code string cannot contain null bytes
"""

import os
import sys

def fix_encoding_issues():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π –≤ main.py"""
    
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π main.py")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists('main.py'):
        print("‚ùå –§–∞–π–ª main.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    try:
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –≤ –±–∏–Ω–∞—Ä–Ω–æ–º —Ä–µ–∂–∏–º–µ
        print("üìñ –ß–∏—Ç–∞—é —Ñ–∞–π–ª main.py...")
        with open('main.py', 'rb') as f:
            data = f.read()
        
        print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(data)} –±–∞–π—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ null bytes
        null_count = data.count(b'\x00')
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ null bytes: {null_count}")
        
        if null_count > 0:
            print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã null bytes!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–µ—Ä–≤—ã—Ö null bytes
            positions = []
            for i, byte in enumerate(data):
                if byte == 0:
                    positions.append(i)
                    if len(positions) >= 5:
                        break
            print(f"üìç –ü–æ–∑–∏—Ü–∏–∏ null bytes (–ø–µ—Ä–≤—ã–µ 5): {positions}")
            
            # –£–¥–∞–ª—è–µ–º null bytes
            clean_data = data.replace(b'\x00', b'')
            print(f"üßπ –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è null bytes: {len(clean_data)} –±–∞–π—Ç")
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            backup_name = 'main_broken.py'
            with open(backup_name, 'wb') as f:
                f.write(data)
            print(f"üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_name}")
            
            data = clean_data
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ UTF-8
            text_content = data.decode('utf-8')
            print("‚úÖ –§–∞–π–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ UTF-8")
        except UnicodeDecodeError:
            print("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å UTF-8, –ø—ã—Ç–∞–µ–º—Å—è –¥—Ä—É–≥–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏...")
            
            # –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
            encodings = ['cp1251', 'cp866', 'latin1', 'utf-8-sig']
            text_content = None
            
            for encoding in encodings:
                try:
                    text_content = data.decode(encoding)
                    print(f"‚úÖ –§–∞–π–ª –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π: {encoding}")
                    break
                except UnicodeDecodeError:
                    continue
            
            if text_content is None:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª!")
                return False
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        print("üíæ –°–æ—Ö—Ä–∞–Ω—è—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª...")
        with open('main.py', 'w', encoding='utf-8', newline='\n') as f:
            f.write(text_content)
        
        print("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –º–æ–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
        print("üß™ –ü—Ä–æ–≤–µ—Ä—è—é —Å–∏–Ω—Ç–∞–∫—Å–∏—Å...")
        try:
            with open('main.py', 'r', encoding='utf-8') as f:
                code = f.read()
            
            # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
            compile(code, 'main.py', 'exec')
            print("‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω!")
            
        except SyntaxError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞: {e}")
            return False
        except Exception as e:
            print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {e}")
        
        print("\nüéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
        print("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å: python main.py")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def create_requirements_if_missing():
    """–°–æ–∑–¥–∞–µ—Ç requirements.txt –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
    if not os.path.exists('requirements.txt'):
        print("üìù –°–æ–∑–¥–∞—é requirements.txt...")
        requirements = """PySide6>=6.6.0
pyserial>=3.5
GitPython>=3.1.40
tomli>=2.0.1
ruff>=0.1.8
"""
        with open('requirements.txt', 'w', encoding='utf-8') as f:
            f.write(requirements)
        print("‚úÖ –°–æ–∑–¥–∞–Ω requirements.txt")

def create_config_if_missing():
    """–°–æ–∑–¥–∞–µ—Ç config.toml –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
    if not os.path.exists('config.toml'):
        print("üìù –°–æ–∑–¥–∞—é config.toml...")
        config = """[buttons]
"–¢–µ—Å—Ç" = "test"

[sequences]
test = ["–¢–µ—Å—Ç"]

[serial_default]
port = "COM1"
baudrate = 115200
"""
        with open('config.toml', 'w', encoding='utf-8') as f:
            f.write(config)
        print("‚úÖ –°–æ–∑–¥–∞–Ω config.toml")

if __name__ == "__main__":
    print("üöÄ –£—Ç–∏–ª–∏—Ç–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å main.py")
    print("–ê–≤—Ç–æ—Ä: AI Assistant")
    print("–í–µ—Ä—Å–∏—è: 1.0")
    print()
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º main.py
    success = fix_encoding_issues()
    
    if success:
        print()
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ–∞–π–ª—ã
        create_requirements_if_missing()
        create_config_if_missing()
        
        print()
        print("üìã –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –ó–ê–ü–£–°–ö–ê:")
        print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É: python main.py")
        print()
        print("üêõ –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç—Å—è:")
        print("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–µ—Ä—Å–∏—é Python (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 3.9+)")
        print("- –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        print("- –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: python -m pip install --upgrade pip")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        print("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–∫–∞—á–∞—Ç—å —á–∏—Å—Ç—É—é –≤–µ—Ä—Å–∏—é –ø—Ä–æ–µ–∫—Ç–∞") 