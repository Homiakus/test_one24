#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ config.toml –≤ MOTTO —Ñ–æ—Ä–º–∞—Ç

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π config.toml –≤ MOTTO v1.1 —Ñ–æ—Ä–º–∞—Ç
—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤—Å–µ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.
"""

import sys
import tomli
import tomli_w
from pathlib import Path
from core.motto import CompatibilityAdapter


def migrate_config(input_file: str, output_file: str = None) -> bool:
    """
    –ú–∏–≥—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ v1.0 –≤ v1.1
    
    Args:
        input_file: –ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É config.toml
        output_file: –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É (–µ—Å–ª–∏ None, —Å–æ–∑–¥–∞—ë—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        
    Returns:
        True –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
    """
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        print(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ {input_file}...")
        with open(input_file, 'rb') as f:
            v1_config = tomli.load(f)
        
        print("‚úì –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è v1.0 –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –°–æ–∑–¥–∞—ë–º –∞–¥–∞–ø—Ç–µ—Ä –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
        adapter = CompatibilityAdapter()
        print("–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ MOTTO v1.1...")
        
        config = adapter.convert_v1_to_v1_1(v1_config)
        
        print("‚úì –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ MOTTO v1.1")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if output_file is None:
            input_path = Path(input_file)
            output_file = input_path.parent / f"{input_path.stem}_motto.toml"
        
        # –°–æ–∑–¥–∞—ë–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        config_dict = {
            'version': config.version,
            'vars': config.vars,
            'profiles': {name: profile for name, profile in config.profiles.items()},
            'conditions': {name: cond for name, cond in config.conditions.items()},
            'guards': {name: guard for name, guard in config.guards.items()},
            'policies': {name: policy for name, policy in config.policies.items()},
            'resources': {name: resource for name, resource in config.resources.items()},
            'events': {name: event for name, event in config.events.items()},
            'handlers': {name: handler for name, handler in config.handlers.items()},
            'units': config.units or {},
            'validators': {name: validator for name, validator in config.validators.items()},
            'runtime': config.runtime or {},
            'audit': config.audit or {}
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã
        commands = {}
        for button_name, command in v1_config.get('buttons', {}).items():
            command_name = adapter._normalize_command_name(button_name)
            commands[command_name] = command
        
        config_dict['commands'] = commands
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        sequences_dict = {}
        for name, seq in config.sequences.items():
            sequences_dict[name] = {
                'name': seq.name,
                'description': seq.description,
                'type': str(seq.type),
                'steps': seq.steps,
                'policy': seq.policy,
                'guards': seq.guards,
                'post_checks': seq.post_checks
            }
        config_dict['sequences'] = sequences_dict
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å v1.0
        if 'serial_default' in v1_config:
            config_dict['serial_default'] = v1_config['serial_default']
        
        if 'wizard' in v1_config:
            config_dict['wizard'] = v1_config['wizard']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ MOTTO –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ {output_file}...")
        with open(output_file, 'wb') as f:
            tomli_w.dump(config_dict, f)
        
        print("‚úì MOTTO –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:")
        print(f"  ‚Ä¢ –ö–æ–º–∞–Ω–¥: {len(commands)}")
        print(f"  ‚Ä¢ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π: {len(config.sequences)}")
        print(f"  ‚Ä¢ –£—Å–ª–æ–≤–∏–π: {len(config.conditions)}")
        print(f"  ‚Ä¢ –ì–≤–∞—Ä–¥–æ–≤: {len(config.guards)}")
        print(f"  ‚Ä¢ –ü–æ–ª–∏—Ç–∏–∫: {len(config.policies)}")
        print(f"  ‚Ä¢ –†–µ—Å—É—Ä—Å–æ–≤: {len(config.resources)}")
        print(f"  ‚Ä¢ –°–æ–±—ã—Ç–∏–π: {len(config.events)}")
        print(f"  ‚Ä¢ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {len(config.handlers)}")
        
        print(f"\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìÅ –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {input_file}")
        print(f"üìÅ MOTTO —Ñ–∞–π–ª: {output_file}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python migrate_to_motto.py <input_file> [output_file]")
        print("")
        print("–ü—Ä–∏–º–µ—Ä—ã:")
        print("  python migrate_to_motto.py config.toml")
        print("  python migrate_to_motto.py config.toml config_motto.toml")
        return 1
    
    input_file = sys.argv[1]
    output_file = sys.argv[2] if len(sys.argv) > 2 else None
    
    if not Path(input_file).exists():
        print(f"‚ùå –§–∞–π–ª {input_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return 1
    
    success = migrate_config(input_file, output_file)
    return 0 if success else 1


if __name__ == '__main__':
    sys.exit(main())