"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
"""
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from core.di_container import DIContainer, register, resolve, get_container
from core.di_config_loader import DIConfigLoader
from core.interfaces import (
    ISerialManager, ICommandExecutor, ISequenceManager, 
    IConfigLoader, ISettingsManager, ILogger
)


def example_basic_usage():
    """–ü—Ä–∏–º–µ—Ä –±–∞–∑–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
    print("=== –ü—Ä–∏–º–µ—Ä –±–∞–∑–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ===")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    container = DIContainer()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
    class SimpleLogger:
        def __init__(self):
            self.messages = []
        
        def info(self, message: str):
            self.messages.append(f"INFO: {message}")
            print(f"INFO: {message}")
        
        def error(self, message: str):
            self.messages.append(f"ERROR: {message}")
            print(f"ERROR: {message}")
    
    class SimpleSerialManager:
        def __init__(self, logger: SimpleLogger):
            self.logger = logger
            self.connected = False
        
        def connect(self, port: str, **kwargs):
            self.logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ—Ä—Ç—É {port}")
            self.connected = True
            return True
        
        def disconnect(self):
            self.logger.info("–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –ø–æ—Ä—Ç–∞")
            self.connected = False
        
        def send_command(self, command: str):
            self.logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {command}")
            return True
        
        def is_connected(self):
            return self.connected
    
    class SimpleCommandExecutor:
        def __init__(self, serial_manager: SimpleSerialManager, logger: SimpleLogger):
            self.serial_manager = serial_manager
            self.logger = logger
        
        def execute(self, command: str, **kwargs):
            self.logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {command}")
            return self.serial_manager.send_command(command)
        
        def validate_command(self, command: str):
            return bool(command and command.strip())
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
    container.register(ILogger, SimpleLogger)
    container.register(ISerialManager, SimpleSerialManager)
    container.register(ICommandExecutor, SimpleCommandExecutor)
    
    print("–°–µ—Ä–≤–∏—Å—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    # –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    logger = container.resolve(ILogger)
    serial_manager = container.resolve(ISerialManager)
    command_executor = container.resolve(ICommandExecutor)
    
    print(f"Logger: {type(logger).__name__}")
    print(f"SerialManager: {type(serial_manager).__name__}")
    print(f"CommandExecutor: {type(command_executor).__name__}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    serial_manager.connect("COM1")
    command_executor.execute("test command")
    
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ª–æ–≥–≥–µ—Ä–µ: {len(logger.messages)}")
    print()


def example_singleton_vs_transient():
    """–ü—Ä–∏–º–µ—Ä —Ä–∞–∑–ª–∏—á–∏–π –º–µ–∂–¥—É singleton –∏ transient"""
    print("=== –ü—Ä–∏–º–µ—Ä Singleton vs Transient ===")
    
    container = DIContainer()
    
    class Counter:
        def __init__(self):
            self.count = 0
        
        def increment(self):
            self.count += 1
            return self.count
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–∞–∫ singleton
    container.register(ISerialManager, Counter, singleton=True)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–∞–∫ transient
    container.register(ILogger, Counter, singleton=False)
    
    # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
    singleton1 = container.resolve(ISerialManager)
    singleton2 = container.resolve(ISerialManager)
    
    transient1 = container.resolve(ILogger)
    transient2 = container.resolve(ILogger)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º singleton
    singleton1.increment()  # count = 1
    singleton2.increment()  # count = 2 (—Ç–æ—Ç –∂–µ —ç–∫–∑–µ–º–ø–ª—è—Ä)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º transient
    transient1.increment()  # count = 1
    transient2.increment()  # count = 1 (–Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä)
    
    print(f"Singleton: {singleton1.count} (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 2)")
    print(f"Transient1: {transient1.count} (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 1)")
    print(f"Transient2: {transient2.count} (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 1)")
    print()


def example_config_loader():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("=== –ü—Ä–∏–º–µ—Ä –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ===")
    
    config_path = "resources/di_config.toml"
    
    if not os.path.exists(config_path):
        print(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫
    config_loader = DIConfigLoader()
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    errors = config_loader.validate_config(config_path)
    if errors:
        print("–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
        for error in errors:
            print(f"  - {error}")
        return
    
    print("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if config_loader.load_config(config_path):
        container = config_loader.get_container()
        services = container.get_registered_services()
        print(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã: {services}")
    else:
        print("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    print()


def example_global_container():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
    print("=== –ü—Ä–∏–º–µ—Ä –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ===")
    
    # –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    container = get_container()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
    class GlobalService:
        def __init__(self):
            self.name = "GlobalService"
            print(f"–°–æ–∑–¥–∞–Ω {self.name}")
    
    register(ILogger, GlobalService)
    
    # –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
    service = resolve(ILogger)
    print(f"–ü–æ–ª—É—á–µ–Ω —Å–µ—Ä–≤–∏—Å: {service.name}")
    
    # –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —Ç–æ—Ç –∂–µ —ç–∫–∑–µ–º–ø–ª—è—Ä (singleton)
    service2 = resolve(ILogger)
    print(f"–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {service2.name}")
    print(f"–¢–æ—Ç –∂–µ —ç–∫–∑–µ–º–ø–ª—è—Ä: {service is service2}")
    print()


def example_error_handling():
    """–ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    print("=== –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ ===")
    
    container = DIContainer()
    
    # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞–∑—Ä–µ—à–∏—Ç—å –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
    try:
        service = container.resolve(ISerialManager)
        print("–°–µ—Ä–≤–∏—Å —Ä–∞–∑—Ä–µ—à–µ–Ω (–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ)")
    except ValueError as e:
        print(f"–û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
    class ServiceA:
        def __init__(self, service_b):
            self.service_b = service_b
    
    class ServiceB:
        def __init__(self, service_a):
            self.service_a = service_a
    
    container.register(ISerialManager, ServiceA, dependencies={"service_b": ICommandExecutor})
    container.register(ICommandExecutor, ServiceB, dependencies={"service_a": ISerialManager})
    
    try:
        container.resolve(ISerialManager)
        print("–¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ (–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ)")
    except RuntimeError as e:
        print(f"–û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {e}")
    print()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏"""
    print("üöÄ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞\n")
    
    examples = [
        example_basic_usage,
        example_singleton_vs_transient,
        example_config_loader,
        example_global_container,
        example_error_handling
    ]
    
    for example in examples:
        try:
            example()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–µ {example.__name__}: {e}")
            print()
    
    print("‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")


if __name__ == "__main__":
    main()
