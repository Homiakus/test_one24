# GitHub Actions workflow for Fixer & Orchestrator v3.0
# Automated CI/CD pipeline with quality gates

name: Fixer & Orchestrator CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Daily security scan at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.9'
  COVERAGE_THRESHOLD: 80
  MYPY_ERROR_THRESHOLD: 0

jobs:
  # Quality Analysis Job
  quality-analysis:
    name: Quality Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pre-commit

      - name: Run pre-commit hooks
        run: |
          pre-commit run --all-files

      - name: Type checking with mypy
        run: |
          mypy . --config-file mypy.ini
        continue-on-error: true

      - name: Run tests with coverage
        run: |
          pytest --cov=. --cov-report=xml --cov-report=html --cov-fail-under=${{ env.COVERAGE_THRESHOLD }}
        continue-on-error: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

      - name: Generate quality report
        run: |
          echo "## Quality Analysis Report" >> $GITHUB_STEP_SUMMARY
          echo "### Coverage: $(grep -o 'TOTAL.*[0-9]*%' coverage.xml | tail -1)" >> $GITHUB_STEP_SUMMARY
          echo "### MyPy Errors: $(mypy . --config-file mypy.ini 2>&1 | grep -c 'error:' || echo '0')" >> $GITHUB_STEP_SUMMARY

  # Security Analysis Job
  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Semgrep security scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: .buglab/configs/semgrep.yml
          output-format: sarif
          output-file: semgrep-results.sarif

      - name: Upload Semgrep results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: semgrep-results.sarif

      - name: Run Bandit security scan
        run: |
          pip install bandit
          bandit -r . -f json -o bandit-results.json || true

      - name: Generate security report
        run: |
          echo "## Security Analysis Report" >> $GITHUB_STEP_SUMMARY
          echo "### Semgrep Findings: $(jq '.runs[0].results | length' semgrep-results.sarif 2>/dev/null || echo '0')" >> $GITHUB_STEP_SUMMARY
          echo "### Bandit Findings: $(jq '.results | length' bandit-results.json 2>/dev/null || echo '0')" >> $GITHUB_STEP_SUMMARY

  # Performance Analysis Job
  performance-analysis:
    name: Performance Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest-benchmark

      - name: Run performance benchmarks
        run: |
          pytest --benchmark-only --benchmark-sort=mean
        continue-on-error: true

      - name: Generate performance report
        run: |
          echo "## Performance Analysis Report" >> $GITHUB_STEP_SUMMARY
          echo "### Benchmark Results: See pytest-benchmark output" >> $GITHUB_STEP_SUMMARY

  # Documentation Check Job
  documentation-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check DocsPro structure
        run: |
          echo "## Documentation Check Report" >> $GITHUB_STEP_SUMMARY
          echo "### DocsPro Files: $(find DocsPro -name '*.md' | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "### ADRs: $(find DocsPro -name '*ADR*' | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "### Risk Register: $(test -f 'DocsPro/06_Risks/risk_register.md' && echo 'Present' || echo 'Missing')" >> $GITHUB_STEP_SUMMARY

  # Build and Test Job
  build-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: [quality-analysis, security-analysis]
    timeout-minutes: 25
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run full test suite
        run: |
          pytest --cov=. --cov-report=html --cov-report=xml --cov-fail-under=${{ env.COVERAGE_THRESHOLD }}

      - name: Build documentation
        run: |
          pip install sphinx sphinx-rtd-theme
          sphinx-build -b html docs/ docs/_build/html
        continue-on-error: true

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            htmlcov/
            coverage.xml
            docs/_build/html/
            .buglab/logs/

  # Deploy Job (only on main branch)
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build-test]
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create release
        run: |
          echo "## Deployment Report" >> $GITHUB_STEP_SUMMARY
          echo "### Release: v$(date +%Y.%m.%d)" >> $GITHUB_STEP_SUMMARY
          echo "### Status: Ready for deployment" >> $GITHUB_STEP_SUMMARY

      - name: Update .buglab logs
        run: |
          echo "$(date): CI/CD pipeline completed successfully" >> .buglab/logs/ci_history.log