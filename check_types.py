#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ.
"""
import ast
import sys
from pathlib import Path
from typing import List, Dict, Set, Tuple, Optional, Union


class TypeChecker:
    """
    –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≤–µ—Ä—â–∏–∫ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ AST.
    """
    
    def __init__(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—â–∏–∫–∞."""
        self.errors: List[str] = []
        self.warnings: List[str] = []
        
    def check_file(self, file_path: Path) -> None:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª–µ.
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
            tree = ast.parse(content)
            self._check_ast(tree, file_path)
            
        except SyntaxError as e:
            self.errors.append(f"Syntax error in {file_path}: {e}")
        except Exception as e:
            self.errors.append(f"Error parsing {file_path}: {e}")
    
    def _check_ast(self, tree: ast.AST, file_path: Path) -> None:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ AST –¥–µ—Ä–µ–≤–∞.
        
        Args:
            tree: AST –¥–µ—Ä–µ–≤–æ
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        """
        for node in ast.walk(tree):
            if isinstance(node, ast.FunctionDef):
                self._check_function(node, file_path)
            elif isinstance(node, ast.AsyncFunctionDef):
                self._check_function(node, file_path)
            elif isinstance(node, ast.ClassDef):
                self._check_class(node, file_path)
    
    def _check_function(self, node: Union[ast.FunctionDef, ast.AsyncFunctionDef], file_path: Path) -> None:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏.
        
        Args:
            node: –£–∑–µ–ª —Ñ—É–Ω–∫—Ü–∏–∏
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ docstring
        if not self._has_docstring(node):
            self.warnings.append(f"Function {node.name} in {file_path} has no docstring")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º type hints
        if node.returns is None:
            self.warnings.append(f"Function {node.name} in {file_path} has no return type hint")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        for arg in node.args.args:
            if arg.annotation is None:
                self.warnings.append(f"Parameter {arg.arg} in function {node.name} in {file_path} has no type hint")
    
    def _check_class(self, node: ast.ClassDef, file_path: Path) -> None:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∞—Å—Å–∞.
        
        Args:
            node: –£–∑–µ–ª –∫–ª–∞—Å—Å–∞
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ docstring
        if not self._has_docstring(node):
            self.warnings.append(f"Class {node.name} in {file_path} has no docstring")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã
        for item in node.body:
            if isinstance(item, ast.FunctionDef):
                self._check_function(item, file_path)
    
    def _has_docstring(self, node: Union[ast.FunctionDef, ast.AsyncFunctionDef, ast.ClassDef]) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è docstring.
        
        Args:
            node: –£–∑–µ–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ –µ—Å—Ç—å docstring
        """
        if not node.body:
            return False
        
        first_item = node.body[0]
        return (isinstance(first_item, ast.Expr) and 
                isinstance(first_item.value, ast.Constant) and
                isinstance(first_item.value.value, str))
    
    def print_report(self) -> None:
        """–í—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ."""
        print("=" * 60)
        print("–û–¢–ß–ï–¢ –û –ü–†–û–í–ï–†–ö–ï –¢–ò–ü–ò–ó–ê–¶–ò–ò")
        print("=" * 60)
        
        if self.errors:
            print(f"\n‚ùå –û–®–ò–ë–ö–ò ({len(self.errors)}):")
            for error in self.errors:
                print(f"  ‚Ä¢ {error}")
        else:
            print("\n‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        if self.warnings:
            print(f"\n‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø ({len(self.warnings)}):")
            for warning in self.warnings:
                print(f"  ‚Ä¢ {warning}")
        else:
            print("\n‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        print(f"\nüìä –ò–¢–û–ì–û: {len(self.errors)} –æ—à–∏–±–æ–∫, {len(self.warnings)} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")


def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    checker = TypeChecker()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
    modules = ["core", "ui", "utils"]
    
    for module in modules:
        module_path = Path(module)
        if module_path.exists():
            for py_file in module_path.rglob("*.py"):
                if not py_file.name.startswith("__"):
                    checker.check_file(py_file)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º main.py
    main_file = Path("main.py")
    if main_file.exists():
        checker.check_file(main_file)
    
    checker.print_report()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏
    sys.exit(1 if checker.errors else 0)


if __name__ == "__main__":
    main()
