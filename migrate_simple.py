#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â—ë–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ config.toml –≤ MOTTO —Ñ–æ—Ä–º–∞—Ç

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–æ—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω config_motto.toml –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –µ–≥–æ –ø–æ–¥ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.
"""

import sys
import tomli
import tomli_w
from pathlib import Path


def migrate_config_simple(input_file: str, output_file: str = None) -> bool:
    """
    –ü—Ä–æ—Å—Ç–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    
    Args:
        input_file: –ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É config.toml
        output_file: –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
        
    Returns:
        True –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
    """
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        print(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ {input_file}...")
        with open(input_file, 'rb') as f:
            v1_config = tomli.load(f)
        
        print("‚úì –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è v1.0 –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω MOTTO
        print("–ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–∞ MOTTO...")
        with open('config_motto.toml', 'rb') as f:
            motto_template = tomli.load(f)
        
        print("‚úì –®–∞–±–ª–æ–Ω MOTTO –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if output_file is None:
            input_path = Path(input_file)
            output_file = input_path.parent / f"{input_path.stem}_motto.toml"
        
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω –ø–æ–¥ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        print("–ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        motto_template['vars']['default_port'] = v1_config.get('serial_default', {}).get('port', 'COM4')
        motto_template['vars']['default_baudrate'] = v1_config.get('serial_default', {}).get('baudrate', 115200)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª–∏
        if 'env' not in motto_template['profiles']['default']:
            motto_template['profiles']['default']['env'] = {}
        motto_template['profiles']['default']['env']['port'] = v1_config.get('serial_default', {}).get('port', 'COM4')
        motto_template['profiles']['default']['env']['baudrate'] = v1_config.get('serial_default', {}).get('baudrate', 115200)
        motto_template['profiles']['default']['env']['timeout'] = v1_config.get('serial_default', {}).get('timeout', 1.0)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ buttons
        commands = {}
        for button_name, command in v1_config.get('buttons', {}).items():
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º—è –∫–æ–º–∞–Ω–¥—ã
            command_name = button_name.replace(' ', '_').replace('‚Üí', '_').replace('(', '').replace(')', '').lower()
            while '__' in command_name:
                command_name = command_name.replace('__', '_')
            command_name = command_name.rstrip('_')
            
            # –ó–∞–º–µ–Ω—è–µ–º —Ä—É—Å—Å–∫–∏–µ —Å–ª–æ–≤–∞
            replacements = {
                'multi': 'multi',
                'rright': 'rright',
                'clamp': 'clamp',
                'kl1': 'kl1',
                'kl2': 'kl2',
                '–Ω–∞—Å–æ—Å': 'pump',
                '—Ö–æ–º–∏–Ω–≥': 'home',
                '—Å–ª–∏–≤': 'drain',
                '—ç–∫—Å–ø–æ–∑–∏—Ü–∏—è': 'exposure',
                '–≤–µ—Ä—Ö': 'up',
                '–∑–∞–≥—Ä—É–∑–∫–∞_–ø—Ä–æ–±–∏—Ä–æ–∫': 'load_tubes',
                '–∏–∑–≤–ª–µ—á–µ–Ω–∏–µ_–ø—Ä–æ–±–∏—Ä–æ–∫': 'extract_tubes',
                '–ø—Ä–µ–¥–Ω–æ–ª—å': 'pre_zero',
                '—Å–∂–∞—Ç—å': 'close',
                '—Ä–∞–∑–∂–∞—Ç—å': 'open',
                '–≤–∫–ª—é—á–∏—Ç—å': 'on',
                '–≤—ã–∫–ª—é—á–∏—Ç—å': 'off',
                '–ø—Ä–æ–¥—É–≤–∫–∞': 'flush',
                '—Ç–µ—Å—Ç–æ–≤–∞—è_–∫–æ–º–∞–Ω–¥–∞': 'test_command',
                '—Å—Ç–∞—Ç—É—Å_—Å–∏—Å—Ç–µ–º—ã': 'system_status'
            }
            
            for ru, en in replacements.items():
                command_name = command_name.replace(ru, en)
            
            commands[command_name] = command
        
        motto_template['commands'] = commands
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        for seq_name, steps in v1_config.get('sequences', {}).items():
            if seq_name in motto_template['sequences']:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —à–∞–≥–∏
                converted_steps = []
                for step in steps:
                    if step.startswith('wait '):
                        converted_steps.append(step)
                    else:
                        # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É
                        found_command = None
                        for cmd_name, cmd_value in commands.items():
                            if step in cmd_value or cmd_value in step:
                                found_command = cmd_name
                                break
                        
                        if found_command:
                            converted_steps.append(found_command)
                        else:
                            converted_steps.append(step)
                
                motto_template['sequences'][seq_name]['steps'] = converted_steps
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å v1.0
        if 'serial_default' in v1_config:
            motto_template['serial_default'] = v1_config['serial_default']
        
        if 'wizard' in v1_config:
            motto_template['wizard'] = v1_config['wizard']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ MOTTO –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ {output_file}...")
        with open(output_file, 'wb') as f:
            tomli_w.dump(motto_template, f)
        
        print("‚úì MOTTO –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:")
        print(f"  ‚Ä¢ –ö–æ–º–∞–Ω–¥: {len(commands)}")
        print(f"  ‚Ä¢ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π: {len(v1_config.get('sequences', {}))}")
        print(f"  ‚Ä¢ –£—Å–ª–æ–≤–∏–π: {len(motto_template.get('conditions', {}))}")
        print(f"  ‚Ä¢ –ì–≤–∞—Ä–¥–æ–≤: {len(motto_template.get('guards', {}))}")
        print(f"  ‚Ä¢ –ü–æ–ª–∏—Ç–∏–∫: {len(motto_template.get('policies', {}))}")
        print(f"  ‚Ä¢ –†–µ—Å—É—Ä—Å–æ–≤: {len(motto_template.get('resources', {}))}")
        print(f"  ‚Ä¢ –°–æ–±—ã—Ç–∏–π: {len(motto_template.get('events', {}))}")
        print(f"  ‚Ä¢ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {len(motto_template.get('handlers', {}))}")
        
        print(f"\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìÅ –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {input_file}")
        print(f"üìÅ MOTTO —Ñ–∞–π–ª: {output_file}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python migrate_simple.py <input_file> [output_file]")
        print("")
        print("–ü—Ä–∏–º–µ—Ä—ã:")
        print("  python migrate_simple.py config.toml")
        print("  python migrate_simple.py config.toml config_motto.toml")
        return 1
    
    input_file = sys.argv[1]
    output_file = sys.argv[2] if len(sys.argv) > 2 else None
    
    if not Path(input_file).exists():
        print(f"‚ùå –§–∞–π–ª {input_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return 1
    
    if not Path('config_motto.toml').exists():
        print(f"‚ùå –§–∞–π–ª config_motto.toml –Ω–µ –Ω–∞–π–¥–µ–Ω (—à–∞–±–ª–æ–Ω)")
        return 1
    
    success = migrate_config_simple(input_file, output_file)
    return 0 if success else 1


if __name__ == '__main__':
    sys.exit(main())