"""
/**
 * @file: navigation_manager.py
 * @description: –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @dependencies: PySide6.QtWidgets, PySide6.QtCore, event_bus
 * @created: 2024-12-19
 */

–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏,
—Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –∏ –∏—Å—Ç–æ—Ä–∏–µ–π –ø–µ—Ä–µ—Ö–æ–¥–æ–≤.
"""

import logging
from typing import Dict, Optional, List, Callable
from PyQt6.QtWidgets import QPushButton, QStackedWidget
from PyQt6.QtCore import QObject, pyqtSignal as Signal

from .event_bus import event_bus


class NavigationManager(QObject):
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü, —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –≤—Å–µ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é.
    """
    
    # –°–∏–≥–Ω–∞–ª—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    page_changed = Signal(str)  # page_name
    navigation_ready = Signal()
    
    def __init__(self, content_area: QStackedWidget):
        super().__init__()
        self.logger = logging.getLogger(__name__)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.content_area = content_area
        self.nav_buttons: Dict[str, QPushButton] = {}
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
        self.pages_config = [
            ("wizard", "ü™Ñ –ú–∞—Å—Ç–µ—Ä", True),
            ("sequences", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", False),
            ("commands", "‚ö° –ö–æ–º–∞–Ω–¥—ã", False),
            ("designer", "üñ±Ô∏è –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä", False),
            ("settings", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", False),
            ("firmware", "üîß –ü—Ä–æ—à–∏–≤–∫–∞", False),
        ]
        
        # –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        self.current_page = "wizard"
        
        # –ò—Å—Ç–æ—Ä–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        self.navigation_history: List[str] = []
        self.max_history_size = 10
        
        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
        self._setup_event_subscriptions()
        
        self.logger.info("NavigationManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _setup_event_subscriptions(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —Å–æ–±—ã—Ç–∏—è"""
        try:
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
            event_bus.subscribe("page_change_requested", self._on_page_change_requested)
            event_bus.subscribe("navigation_reset", self._on_navigation_reset)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —Å–æ–±—ã—Ç–∏—è: {e}")
    
    def setup_navigation_buttons(self, buttons: Dict[str, QPushButton]):
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.
        
        Args:
            buttons: –°–ª–æ–≤–∞—Ä—å –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        """
        try:
            self.nav_buttons = buttons
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤
            for page_name, button in self.nav_buttons.items():
                button.clicked.connect(lambda checked, name=page_name: self.switch_page(name))
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self._update_button_states()
            
            self.logger.info("–ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫: {e}")
    
    def switch_page(self, page_name: str) -> bool:
        """
        –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É.
        
        Args:
            page_name: –ò–º—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            if page_name not in [page[0] for page in self.pages_config]:
                self.logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {page_name}")
                return False
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            if self.current_page != page_name:
                self._add_to_history(self.current_page)
                self.current_page = page_name
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
            self._update_button_states()
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ content_area
            page_index = self._get_page_index(page_name)
            if page_index is not None:
                self.content_area.setCurrentIndex(page_index)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
                event_bus.emit("page_changed", page_name=page_name)
                self.page_changed.emit(page_name)
                
                self.logger.info(f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: {page_name}")
                return True
            else:
                self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_name}")
                return False
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É '{page_name}': {e}")
            return False
    
    def _get_page_index(self, page_name: str) -> Optional[int]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ –∏–º–µ–Ω–∏.
        
        Args:
            page_name: –ò–º—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            
        Returns:
            –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        page_indices = {
            'wizard': 0,
            'sequences': 1,
            'commands': 2,
            'designer': 3,
            'settings': 4,
            'firmware': 5,
        }
        return page_indices.get(page_name)
    
    def _update_button_states(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫"""
        try:
            for page_name, button in self.nav_buttons.items():
                button.setChecked(page_name == self.current_page)
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫: {e}")
    
    def _add_to_history(self, page_name: str):
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –∏—Å—Ç–æ—Ä–∏—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
        
        Args:
            page_name: –ò–º—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        """
        try:
            if page_name and page_name not in self.navigation_history:
                self.navigation_history.append(page_name)
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
                if len(self.navigation_history) > self.max_history_size:
                    self.navigation_history.pop(0)
                    
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {e}")
    
    def go_back(self) -> bool:
        """
        –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É.
        
        Returns:
            True –µ—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            if len(self.navigation_history) > 0:
                previous_page = self.navigation_history.pop()
                return self.switch_page(previous_page)
            else:
                self.logger.debug("–ò—Å—Ç–æ—Ä–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø—É—Å—Ç–∞")
                return False
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞–∑–∞–¥: {e}")
            return False
    
    def go_home(self) -> bool:
        """
        –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (sequences).
        
        Returns:
            True –µ—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        return self.switch_page("sequences")
    
    def get_current_page(self) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
        
        Returns:
            –ò–º—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        """
        return self.current_page
    
    def get_navigation_history(self) -> List[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –∏—Å—Ç–æ—Ä–∏–∏
        """
        return self.navigation_history.copy()
    
    def get_available_pages(self) -> List[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü.
        
        Returns:
            –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
        """
        return [page[0] for page in self.pages_config]
    
    def is_page_available(self, page_name: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
        
        Args:
            page_name: –ò–º—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        return page_name in [page[0] for page in self.pages_config]
    
    def _on_page_change_requested(self, page_name: str):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
        
        Args:
            page_name: –ò–º—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        """
        try:
            self.switch_page(page_name)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
    
    def _on_navigation_reset(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è —Å–±—Ä–æ—Å–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        try:
            self.current_page = "wizard"
            self.navigation_history.clear()
            self._update_button_states()
            self.logger.info("–ù–∞–≤–∏–≥–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {e}")
    
    def reset_navigation(self):
        """–°–±—Ä–æ—Å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é"""
        self._on_navigation_reset()
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ NavigationManager"""
        try:
            # –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π
            event_bus.unsubscribe("page_change_requested", self._on_page_change_requested)
            event_bus.unsubscribe("navigation_reset", self._on_navigation_reset)
            
            # –û—á–∏—â–∞–µ–º –∫–Ω–æ–ø–∫–∏
            for button in self.nav_buttons.values():
                try:
                    button.clicked.disconnect()
                except:
                    pass
            
            self.nav_buttons.clear()
            self.navigation_history.clear()
            
            self.logger.info("NavigationManager –æ—á–∏—â–µ–Ω")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ NavigationManager: {e}")
