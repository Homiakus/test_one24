"""
–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–ª–∞–≥–∞–º–∏ –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
"""
import logging
from typing import Dict, Optional, Any
from PyQt6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QGridLayout,
    QLabel, QPushButton, QCheckBox, QGroupBox, QScrollArea,
    QFrame, QSpacerItem, QSizePolicy, QLineEdit, QComboBox,
    QSpinBox, QTextEdit, QMessageBox
)
from PyQt6.QtCore import Qt, pyqtSignal as Signal, QTimer
from PyQt6.QtGui import QFont, QPalette, QColor

from ui.widgets.modern_widgets import ModernCard
from core.sequence_manager import SequenceManager


class FlagsPage(QWidget):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–ª–∞–≥–∞–º–∏"""
    
    flag_changed = Signal(str, bool)  # flag_name, new_value
    
    def __init__(self, sequence_manager: SequenceManager):
        super().__init__()
        self.sequence_manager = sequence_manager
        self.logger = logging.getLogger(__name__)
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.update_timer = QTimer()
        self.update_timer.timeout.connect(self._update_flags_display)
        self.update_timer.start(1000)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        
        self._setup_ui()
        self._load_flags()
    
    def _setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–ª–∞–≥–∞–º–∏")
        title.setFont(QFont("Segoe UI", 24, QFont.Weight.Bold))
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(title)
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        description = QLabel(
            "–§–ª–∞–≥–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –∫–æ–º–∞–Ω–¥. "
            "–ò–∑–º–µ–Ω–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–ª–∞–≥–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏–∫–æ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."
        )
        description.setWordWrap(True)
        description.setAlignment(Qt.AlignmentFlag.AlignCenter)
        description.setStyleSheet("color: #888888; font-size: 14px;")
        layout.addWidget(description)
        
        # –û–±–ª–∞—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –¥–ª—è —Ñ–ª–∞–≥–æ–≤
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        scroll_area.setVerticalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAsNeeded)
        scroll_area.setStyleSheet("""
            QScrollArea {
                border: none;
                background-color: transparent;
            }
            QScrollBar:vertical {
                background-color: #404040;
                width: 12px;
                border-radius: 6px;
            }
            QScrollBar::handle:vertical {
                background-color: #606060;
                border-radius: 6px;
                min-height: 20px;
            }
            QScrollBar::handle:vertical:hover {
                background-color: #707070;
            }
        """)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ñ–ª–∞–≥–æ–≤
        self.flags_container = QWidget()
        self.flags_layout = QVBoxLayout(self.flags_container)
        self.flags_layout.setContentsMargins(10, 10, 10, 10)
        self.flags_layout.setSpacing(15)
        
        scroll_area.setWidget(self.flags_container)
        layout.addWidget(scroll_area)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = QHBoxLayout()
        buttons_layout.addStretch()
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        refresh_btn = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
        refresh_btn.setFixedSize(120, 40)
        refresh_btn.clicked.connect(self._load_flags)
        refresh_btn.setStyleSheet("""
            QPushButton {
                background-color: #404040;
                color: white;
                border: none;
                border-radius: 8px;
                font-size: 14px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #505050;
            }
            QPushButton:pressed {
                background-color: #303030;
            }
        """)
        buttons_layout.addWidget(refresh_btn)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞
        reset_btn = QPushButton("üîÑ –°–±—Ä–æ—Å")
        reset_btn.setFixedSize(120, 40)
        reset_btn.clicked.connect(self._reset_flags)
        reset_btn.setStyleSheet("""
            QPushButton {
                background-color: #8B4513;
                color: white;
                border: none;
                border-radius: 8px;
                font-size: 14px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #A0522D;
            }
            QPushButton:pressed {
                background-color: #654321;
            }
        """)
        buttons_layout.addWidget(reset_btn)
        
        layout.addLayout(buttons_layout)
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = QLabel("–ì–æ—Ç–æ–≤–æ")
        self.status_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.status_label.setStyleSheet("color: #00AA00; font-size: 12px;")
        layout.addWidget(self.status_label)
    
    def _load_flags(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–ª–∞–≥–æ–≤ –∏–∑ sequence_manager"""
        try:
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –≤–∏–¥–∂–µ—Ç—ã
            for i in reversed(range(self.flags_layout.count())):
                widget = self.flags_layout.itemAt(i).widget()
                if widget:
                    widget.deleteLater()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–ª–∞–≥–∏
            flags = self.sequence_manager.get_all_flags()
            
            if not flags:
                # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É —Å —Ñ–ª–∞–≥–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                self._create_default_flags_group()
            else:
                # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã —Ñ–ª–∞–≥–æ–≤
                self._create_flags_groups(flags)
            
            self.status_label.setText(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(flags)} —Ñ–ª–∞–≥–æ–≤")
            self.status_label.setStyleSheet("color: #00AA00; font-size: 12px;")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–ª–∞–≥–æ–≤: {e}")
            self.status_label.setText(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            self.status_label.setStyleSheet("color: #AA0000; font-size: 12px;")
    
    def _create_default_flags_group(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Å —Ñ–ª–∞–≥–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        group = QGroupBox("–§–ª–∞–≥–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                font-size: 16px;
                color: #E0E0E0;
                border: 2px solid #505050;
                border-radius: 10px;
                margin-top: 10px;
                padding-top: 10px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
            }
        """)
        
        layout = QGridLayout(group)
        layout.setSpacing(15)
        
        default_flags = {
            'auto_mode': '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º',
            'safety_check': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
            'emergency_stop': '–ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞',
            'maintenance_mode': '–†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è',
            'test_mode': '–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º'
        }
        
        row = 0
        for flag_name, description in default_flags.items():
            # –ß–µ–∫–±–æ–∫—Å
            checkbox = QCheckBox(description)
            checkbox.setChecked(False)
            checkbox.stateChanged.connect(
                lambda state, name=flag_name: self._on_flag_changed(name, state == Qt.CheckState.Checked)
            )
            checkbox.setStyleSheet("""
                QCheckBox {
                    font-size: 14px;
                    color: #E0E0E0;
                    spacing: 10px;
                }
                QCheckBox::indicator {
                    width: 20px;
                    height: 20px;
                    border: 2px solid #606060;
                    border-radius: 4px;
                    background-color: #404040;
                }
                QCheckBox::indicator:checked {
                    background-color: #4CAF50;
                    border-color: #4CAF50;
                }
                QCheckBox::indicator:checked::after {
                    content: "‚úì";
                    color: white;
                    font-weight: bold;
                    font-size: 14px;
                }
            """)
            
            # –°—Ç–∞—Ç—É—Å
            status_label = QLabel("–í—ã–∫–ª—é—á–µ–Ω")
            status_label.setStyleSheet("color: #FF6B6B; font-size: 12px; font-weight: bold;")
            status_label.setAlignment(Qt.AlignmentFlag.AlignRight | Qt.AlignmentFlag.AlignVCenter)
            
            layout.addWidget(checkbox, row, 0)
            layout.addWidget(status_label, row, 1)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            checkbox.status_label = status_label
            checkbox.flag_name = flag_name
            
            row += 1
        
        self.flags_layout.addWidget(group)
    
    def _create_flags_groups(self, flags: Dict[str, bool]):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø —Ñ–ª–∞–≥–æ–≤"""
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–ª–∞–≥–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {
            '–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–ª–∞–≥–∏': ['auto_mode', 'safety_check', 'emergency_stop'],
            '–†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã': ['maintenance_mode', 'test_mode', 'debug_mode'],
            '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ñ–ª–∞–≥–∏': []
        }
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–ª–∞–≥–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        for flag_name in flags.keys():
            categorized = False
            for category_flags in categories.values():
                if flag_name in category_flags:
                    categorized = True
                    break
            
            if not categorized:
                categories['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ñ–ª–∞–≥–∏'].append(flag_name)
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã
        for category_name, category_flags in categories.items():
            if not category_flags:
                continue
                
            group = QGroupBox(category_name)
            group.setStyleSheet("""
                QGroupBox {
                    font-weight: bold;
                    font-size: 16px;
                    color: #E0E0E0;
                    border: 2px solid #505050;
                    border-radius: 10px;
                    margin-top: 10px;
                    padding-top: 10px;
                }
                QGroupBox::title {
                    subcontrol-origin: margin;
                    left: 10px;
                    padding: 0 5px 0 5px;
                }
            """)
            
            layout = QGridLayout(group)
            layout.setSpacing(15)
            
            row = 0
            for flag_name in category_flags:
                if flag_name not in flags:
                    continue
                
                value = flags[flag_name]
                
                # –ß–µ–∫–±–æ–∫—Å
                checkbox = QCheckBox(flag_name.replace('_', ' ').title())
                checkbox.setChecked(value)
                checkbox.stateChanged.connect(
                    lambda state, name=flag_name: self._on_flag_changed(name, state == Qt.CheckState.Checked)
                )
                checkbox.setStyleSheet("""
                    QCheckBox {
                        font-size: 14px;
                        color: #E0E0E0;
                        spacing: 10px;
                    }
                    QCheckBox::indicator {
                        width: 20px;
                        height: 20px;
                        border: 2px solid #606060;
                        border-radius: 4px;
                        background-color: #404040;
                    }
                    QCheckBox::indicator:checked {
                        background-color: #4CAF50;
                        border-color: #4CAF50;
                    }
                    QCheckBox::indicator:checked::after {
                        content: "‚úì";
                        color: white;
                        font-weight: bold;
                        font-size: 14px;
                    }
                """)
                
                # –°—Ç–∞—Ç—É—Å
                status_label = QLabel("–í–∫–ª—é—á–µ–Ω" if value else "–í—ã–∫–ª—é—á–µ–Ω")
                status_label.setStyleSheet(
                    f"color: {'#4CAF50' if value else '#FF6B6B'}; "
                    f"font-size: 12px; font-weight: bold;"
                )
                status_label.setAlignment(Qt.AlignmentFlag.AlignRight | Qt.AlignmentFlag.AlignVCenter)
                
                layout.addWidget(checkbox, row, 0)
                layout.addWidget(status_label, row, 1)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                checkbox.status_label = status_label
                checkbox.flag_name = flag_name
                
                row += 1
            
            self.flags_layout.addWidget(group)
    
    def _on_flag_changed(self, flag_name: str, value: bool):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–ª–∞–≥–∞"""
        try:
            self.sequence_manager.set_flag(flag_name, value)
            self.flag_changed.emit(flag_name, value)
            
            self.status_label.setText(f"–§–ª–∞–≥ '{flag_name}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ {value}")
            self.status_label.setStyleSheet("color: #00AA00; font-size: 12px;")
            
            self.logger.info(f"–§–ª–∞–≥ '{flag_name}' –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {value}")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–ª–∞–≥–∞ '{flag_name}': {e}")
            self.status_label.setText(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–ª–∞–≥–∞: {e}")
            self.status_label.setStyleSheet("color: #AA0000; font-size: 12px;")
    
    def _update_flags_display(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–ª–∞–≥–æ–≤"""
        try:
            current_flags = self.sequence_manager.get_all_flags()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã —á–µ–∫–±–æ–∫—Å–æ–≤
            for i in range(self.flags_layout.count()):
                item = self.flags_layout.itemAt(i)
                if item and item.widget():
                    group = item.widget()
                    if isinstance(group, QGroupBox):
                        layout = group.layout()
                        if layout:
                            for j in range(layout.count()):
                                item_widget = layout.itemAt(j).widget()
                                if isinstance(item_widget, QCheckBox) and hasattr(item_widget, 'flag_name'):
                                    flag_name = item_widget.flag_name
                                    if flag_name in current_flags:
                                        value = current_flags[flag_name]
                                        if item_widget.isChecked() != value:
                                            item_widget.setChecked(value)
                                        
                                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                                        if hasattr(item_widget, 'status_label'):
                                            status_label = item_widget.status_label
                                            status_label.setText("–í–∫–ª—é—á–µ–Ω" if value else "–í—ã–∫–ª—é—á–µ–Ω")
                                            status_label.setStyleSheet(
                                                f"color: {'#4CAF50' if value else '#FF6B6B'}; "
                                                f"font-size: 12px; font-weight: bold;"
                                            )
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–ª–∞–≥–æ–≤: {e}")
    
    def _reset_flags(self):
        """–°–±—Ä–æ—Å –≤—Å–µ—Ö —Ñ–ª–∞–≥–æ–≤ –≤ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        try:
            default_flags = {
                'auto_mode': True,
                'safety_check': True,
                'emergency_stop': False,
                'maintenance_mode': False,
                'test_mode': False
            }
            
            for flag_name, default_value in default_flags.items():
                self.sequence_manager.set_flag(flag_name, default_value)
            
            self._load_flags()
            
            self.status_label.setText("–§–ª–∞–≥–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            self.status_label.setStyleSheet("color: #00AA00; font-size: 12px;")
            
            self.logger.info("–§–ª–∞–≥–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–ª–∞–≥–æ–≤: {e}")
            self.status_label.setText(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞: {e}")
            self.status_label.setStyleSheet("color: #AA0000; font-size: 12px;")
    
    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        self.update_timer.stop()
        super().closeEvent(event)