"""
–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ–º–∞–Ω–¥
"""
from typing import Dict
from PySide6.QtWidgets import (
    QHBoxLayout, QLineEdit, QTextEdit, QMessageBox
)
from PySide6.QtCore import Signal

from .base_page import BasePage
from ..shared.utils import create_confirmation_dialog


class CommandsPage(BasePage):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–∞–º–∏"""

    # –°–∏–≥–Ω–∞–ª—ã
    command_execute_requested = Signal(str)  # command
    command_edited = Signal(str, str)  # button_name, command

    def __init__(self, buttons_config: Dict[str, str], parent=None):
        self.buttons_config = buttons_config or {}
        self.button_groups = self._group_buttons()
        super().__init__("–ö–æ–º–∞–Ω–¥—ã", parent)

    def _get_page_title(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        return "‚ö° –ö–æ–º–∞–Ω–¥—ã"

    def _setup_additional_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ UI"""
        # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã –∫–æ–º–∞–Ω–¥
        self._create_command_groups()
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self._create_test_panel()

    def _group_buttons(self) -> Dict[str, Dict[str, str]]:
        """–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        groups = {}

        for button_name, command in self.buttons_config.items():
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä—É–ø–ø—É –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º "–û—Å–Ω–æ–≤–Ω—ã–µ"
            if ":" in button_name:
                group_name = button_name.split(":")[0]
            else:
                group_name = "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"

            if group_name not in groups:
                groups[group_name] = {}

            groups[group_name][button_name] = command

        return groups

    def _create_command_groups(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø –∫–æ–º–∞–Ω–¥"""
        for group_name, buttons in self.button_groups.items():
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –≥—Ä—É–ø–ø—ã
            card = self.create_card(group_name)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–Ω–æ–ø–æ–∫
            button_data = []
            for button_name, command in buttons.items():
                button_data.append({
                    'text': button_name,
                    'type': 'primary',
                    'clicked': lambda checked, cmd=command: self._execute_command(cmd)
                })
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É –∫–Ω–æ–ø–æ–∫
            grid = self.create_button_grid(button_data, max_cols=3, spacing=10)
            card.addLayout(grid)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ layout
            self.content_layout.addWidget(card)

    def _create_test_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        card = self.create_card("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥")
        
        layout = self.create_horizontal_layout(spacing=10)
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã
        self.command_input = QLineEdit()
        self.command_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É...")
        layout.addWidget(self.command_input)
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        execute_btn = self.create_button("–í—ã–ø–æ–ª–Ω–∏—Ç—å", "success")
        execute_btn.clicked.connect(self._execute_custom_command)
        layout.addWidget(execute_btn)
        
        # –î–æ–±–∞–≤–ª—è–µ–º layout –≤ –∫–∞—Ä—Ç–æ—á–∫—É
        card.addLayout(layout)
        
        # –û–±–ª–∞—Å—Ç—å –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.output_area = QTextEdit()
        self.output_area.setMaximumHeight(150)
        self.output_area.setReadOnly(True)
        card.addWidget(self.output_area)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ layout
        self.content_layout.addWidget(card)

    def _execute_command(self, command: str):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
        self.command_execute_requested.emit(command)
        self.logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {command}")
        self.show_status_message(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞: {command}")

    def _execute_custom_command(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã"""
        command = self.command_input.text().strip()
        if not command:
            self.show_error_message("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É", "validation_error")
            return

        self._execute_command(command)
        self.command_input.clear()

    def add_command_output(self, output: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã"""
        current_text = self.output_area.toPlainText()
        self.output_area.setPlainText(current_text + output + "\n")
        self.output_area.verticalScrollBar().setValue(
            self.output_area.verticalScrollBar().maximum()
        )

    def refresh(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        # –ü–µ—Ä–µ–≥—Ä—É–ø–ø–∏—Ä–æ–≤—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
        self.button_groups = self._group_buttons()
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        while self.content_layout.count():
            child = self.content_layout.takeAt(0)
            if child.widget():
                child.widget().deleteLater()
        
        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self._setup_additional_ui()
        
        super().refresh()
