"""
–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
"""
from typing import List, Dict
from PySide6.QtWidgets import (
    QVBoxLayout, QHBoxLayout, QLabel, QListWidget,
    QListWidgetItem, QTextEdit, QSplitter, QInputDialog,
    QMessageBox, QLineEdit
)
from PySide6.QtCore import Signal, Qt

from .base_page import BasePage
from ..widgets.modern_widgets import ModernCard, ModernButton


class DesignerPage(BasePage):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π"""

    # –°–∏–≥–Ω–∞–ª—ã
    sequence_created = Signal(str, list)  # sequence_name, commands
    sequence_updated = Signal(str, list)  # sequence_name, commands

    def __init__(self, buttons_config: Dict[str, str], parent=None):
        self.buttons_config = buttons_config or {}
        self.current_sequence = []
        self.current_sequence_name = None
        super().__init__(parent)

    def _setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(20)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("üîß –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π")
        title.setObjectName("page_title")
        layout.addWidget(title)

        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
        main_splitter = QSplitter(Qt.Orientation.Horizontal)
        layout.addWidget(main_splitter)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        left_widget = self._create_available_commands()
        main_splitter.addWidget(left_widget)

        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å - —Ç–µ–∫—É—â–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        center_widget = self._create_current_sequence()
        main_splitter.addWidget(center_widget)

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        right_widget = self._create_settings()
        main_splitter.addWidget(right_widget)

        main_splitter.setSizes([250, 400, 250])

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        self._create_action_buttons(layout)

    def _create_available_commands(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
        card = ModernCard("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã")

        layout = QVBoxLayout()

        # –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
        self.available_commands = QListWidget()
        self.available_commands.itemDoubleClicked.connect(self._add_command_to_sequence)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        standard_commands = [
            "wait 1", "wait 2", "wait 5",
            "test", "stop", "reset"
        ]

        for cmd in standard_commands:
            item = QListWidgetItem(cmd)
            item.setData(Qt.ItemDataRole.UserRole, cmd)
            self.available_commands.addItem(item)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        for name, cmd in self.buttons_config.items():
            item = QListWidgetItem(f"{name} ({cmd})")
            item.setData(Qt.ItemDataRole.UserRole, cmd)
            self.available_commands.addItem(item)

        layout.addWidget(self.available_commands)

        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã
        add_custom_btn = ModernButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É", "secondary")
        add_custom_btn.clicked.connect(self._add_custom_command)
        layout.addWidget(add_custom_btn)

        card.addLayout(layout)
        return card

    def _create_current_sequence(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Ç–µ–∫—É—â–µ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        card = ModernCard("–¢–µ–∫—É—â–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å")

        layout = QVBoxLayout()

        # –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.sequence_list = QListWidget()
        self.sequence_list.setDragDropMode(QListWidget.DragDropMode.InternalMove)
        layout.addWidget(self.sequence_list)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
        seq_btns_layout = QHBoxLayout()

        move_up_btn = ModernButton("‚Üë", "secondary")
        move_up_btn.clicked.connect(self._move_command_up)

        move_down_btn = ModernButton("‚Üì", "secondary")
        move_down_btn.clicked.connect(self._move_command_down)

        remove_btn = ModernButton("‚úñ", "danger")
        remove_btn.clicked.connect(self._remove_command)

        seq_btns_layout.addWidget(move_up_btn)
        seq_btns_layout.addWidget(move_down_btn)
        seq_btns_layout.addWidget(remove_btn)

        layout.addLayout(seq_btns_layout)

        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        preview_label = QLabel("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:")
        layout.addWidget(preview_label)

        self.preview_text = QTextEdit()
        self.preview_text.setReadOnly(True)
        self.preview_text.setMaximumHeight(100)
        layout.addWidget(self.preview_text)

        card.addLayout(layout)
        return card

    def _create_settings(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        card = ModernCard("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")

        layout = QVBoxLayout()

        # –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        name_layout = QHBoxLayout()
        name_label = QLabel("–ù–∞–∑–≤–∞–Ω–∏–µ:")
        self.sequence_name_edit = QLineEdit()
        self.sequence_name_edit.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ...")
        name_layout.addWidget(name_label)
        name_layout.addWidget(self.sequence_name_edit)
        layout.addLayout(name_layout)

        # –û–ø–∏—Å–∞–Ω–∏–µ
        desc_layout = QVBoxLayout()
        desc_label = QLabel("–û–ø–∏—Å–∞–Ω–∏–µ:")
        self.description_edit = QTextEdit()
        self.description_edit.setMaximumHeight(80)
        self.description_edit.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ...")
        desc_layout.addWidget(desc_label)
        desc_layout.addWidget(self.description_edit)
        layout.addLayout(desc_layout)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats_label = QLabel("–ö–æ–º–∞–Ω–¥: 0\n–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ~0 —Å–µ–∫")
        self.stats_label.setObjectName("stats_label")
        layout.addWidget(self.stats_label)

        card.addLayout(layout)
        return card

    def _create_action_buttons(self, parent_layout):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π"""
        card = ModernCard("–î–µ–π—Å—Ç–≤–∏—è")
        buttons_layout = QHBoxLayout()

        save_btn = ModernButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", "success")
        save_btn.clicked.connect(self._save_sequence)

        load_btn = ModernButton("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å", "primary")
        load_btn.clicked.connect(self._load_sequence)

        clear_btn = ModernButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", "danger")
        clear_btn.clicked.connect(self._clear_sequence)

        buttons_layout.addWidget(save_btn)
        buttons_layout.addWidget(load_btn)
        buttons_layout.addWidget(clear_btn)

        card.addLayout(buttons_layout)
        parent_layout.addWidget(card)

    def _add_command_to_sequence(self, item):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å"""
        command = item.data(Qt.ItemDataRole.UserRole)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
        list_item = QListWidgetItem(command)
        list_item.setData(Qt.ItemDataRole.UserRole, command)
        self.sequence_list.addItem(list_item)

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        self.current_sequence.append(command)
        self._update_preview()
        self._update_stats()

    def _add_custom_command(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã"""
        command, ok = QInputDialog.getText(
            self,
            "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É",
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:"
        )

        if ok and command.strip():
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            item = QListWidgetItem(command.strip())
            item.setData(Qt.ItemDataRole.UserRole, command.strip())
            self.available_commands.addItem(item)

            self.logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")

    def _move_command_up(self):
        """–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤–≤–µ—Ä—Ö"""
        current_row = self.sequence_list.currentRow()
        if current_row > 0:
            # –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ –≤ —Å–ø–∏—Å–∫–µ
            current_item = self.sequence_list.takeItem(current_row)
            self.sequence_list.insertItem(current_row - 1, current_item)
            self.sequence_list.setCurrentRow(current_row - 1)

            # –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            self.current_sequence[current_row], self.current_sequence[current_row - 1] = \
                self.current_sequence[current_row - 1], self.current_sequence[current_row]

            self._update_preview()

    def _move_command_down(self):
        """–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤–Ω–∏–∑"""
        current_row = self.sequence_list.currentRow()
        if current_row < self.sequence_list.count() - 1:
            # –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ –≤ —Å–ø–∏—Å–∫–µ
            current_item = self.sequence_list.takeItem(current_row)
            self.sequence_list.insertItem(current_row + 1, current_item)
            self.sequence_list.setCurrentRow(current_row + 1)

            # –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            self.current_sequence[current_row], self.current_sequence[current_row + 1] = \
                self.current_sequence[current_row + 1], self.current_sequence[current_row]

            self._update_preview()

    def _remove_command(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
        current_row = self.sequence_list.currentRow()
        if current_row >= 0:
            self.sequence_list.takeItem(current_row)
            del self.current_sequence[current_row]
            self._update_preview()
            self._update_stats()

    def _update_preview(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        preview_text = ""
        for i, cmd in enumerate(self.current_sequence, 1):
            preview_text += f"{i}. {cmd}\n"

        self.preview_text.setPlainText(preview_text)

    def _update_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        command_count = len(self.current_sequence)

        # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        estimated_time = 0
        for cmd in self.current_sequence:
            if cmd.startswith("wait "):
                try:
                    wait_time = float(cmd.split()[1])
                    estimated_time += wait_time
                except (IndexError, ValueError):
                    pass
            else:
                estimated_time += 1  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 1 —Å–µ–∫—É–Ω–¥—É –Ω–∞ –∫–æ–º–∞–Ω–¥—É

        self.stats_label.setText(f"–ö–æ–º–∞–Ω–¥: {command_count}\n–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ~{estimated_time} —Å–µ–∫")

    def _save_sequence(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        sequence_name = self.sequence_name_edit.text().strip()
        if not sequence_name:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
            return

        if not self.current_sequence:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—É—Å—Ç–∞")
            return

        self.current_sequence_name = sequence_name
        self.sequence_created.emit(sequence_name, self.current_sequence.copy())

        QMessageBox.information(
            self,
            "–£—Å–ø–µ—Ö",
            f"–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å '{sequence_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"
        )

        self.logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {sequence_name}")

    def _load_sequence(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞
        QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")

    def _clear_sequence(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        reply = QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            "–û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )

        if reply == QMessageBox.StandardButton.Yes:
            self.sequence_list.clear()
            self.current_sequence.clear()
            self.current_sequence_name = None
            self.sequence_name_edit.clear()
            self.description_edit.clear()
            self._update_preview()
            self._update_stats()

    def refresh(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.available_commands.clear()

        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        standard_commands = ["wait 1", "wait 2", "wait 5", "test", "stop", "reset"]
        for cmd in standard_commands:
            item = QListWidgetItem(cmd)
            item.setData(Qt.ItemDataRole.UserRole, cmd)
            self.available_commands.addItem(item)

        # –ö–æ–º–∞–Ω–¥—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        for name, cmd in self.buttons_config.items():
            item = QListWidgetItem(f"{name} ({cmd})")
            item.setData(Qt.ItemDataRole.UserRole, cmd)
            self.available_commands.addItem(item)
