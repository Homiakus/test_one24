"""
–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π MOTTO

–ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è main_window.py —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π MOTTO –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
"""
import logging
from typing import Dict, Optional

from PySide6.QtCore import Qt, QTimer, Signal, QPropertyAnimation, QRect, QEasingCurve
from PySide6.QtGui import QKeyEvent, QMouseEvent
from PySide6.QtWidgets import (
    QMainWindow, QWidget, QHBoxLayout, QVBoxLayout,
    QStackedWidget, QPushButton, QLabel, QFrame,
    QToolButton, QMenu, QMessageBox, QApplication,
    QProgressBar, QTextEdit
)
from PySide6.QtGui import QAction
from PySide6.QtWidgets import QInputDialog

from config.settings import SettingsManager
from core.motto.ui_integration import MOTTOConfigLoader
from core.serial_manager import SerialManager
from core.sequence_manager import SequenceManager, CommandSequenceExecutor
from monitoring import MonitoringManager
from ui.pages.wizard_page import WizardPage
from ui.pages.settings_page import SettingsPage
from ui.pages.sequences_page import SequencesPage
from ui.pages.commands_page import CommandsPage
from ui.pages.designer_page import DesignerPage
from ui.pages.firmware_page import FirmwarePage
from ui.widgets.modern_widgets import ModernCard
from ui.widgets.info_panel import InfoPanel


class MainWindowMOTTO(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π MOTTO"""

    # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è MOTTO
    motto_sequence_progress = Signal(int, str)  # progress, message
    motto_sequence_completed = Signal(str)  # sequence_name
    motto_sequence_error = Signal(str, str)  # sequence_name, error
    motto_info_updated = Signal(dict)  # motto_info

    def __init__(self, config_file: str = 'config_motto_fixed.toml'):
        super().__init__()
        self.logger = logging.getLogger(__name__)
        self.config_file = config_file

        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
            self.logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SettingsManager...")
            self.settings_manager = SettingsManager()
            self.logger.info("SettingsManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            self.logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MOTTOConfigLoader...")
            self.config_loader = MOTTOConfigLoader(config_file)
            self.logger.info("MOTTOConfigLoader –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            self.logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SerialManager...")
            self.serial_manager = SerialManager()
            self.logger.info("SerialManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            self.logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MonitoringManager...")
            self.monitoring_manager = MonitoringManager(self.logger)
            self.logger.info("MonitoringManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            self.logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
            self.config = self.config_loader.load()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞
            if self.config is None:
                self.logger.warning("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é")
                self.config = {}
            
            self.logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
            self.logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SequenceManager...")
            self.sequence_manager = SequenceManager(
                self.config.get('sequences', {}),
                self.config.get('buttons', {})
            )
            self.logger.info("SequenceManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            # –¢–µ–∫—É—â–∏–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            self.sequence_executor: Optional[CommandSequenceExecutor] = None

            # MOTTO –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            self.motto_info = self.config_loader.get_motto_info()
            if self.motto_info:
                self.logger.info(f"MOTTO –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {self.motto_info}")

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI
            self.logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI...")
            self._setup_ui()
            self.logger.info("UI –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            self.logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
            self._setup_connections()
            self.logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

            # –ê–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            if self.settings_manager.update_settings.auto_connect:
                self.logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
                QTimer.singleShot(2000, self._safe_auto_connect)
            else:
                self.logger.info("–ê–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
            
            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            self.connection_check_timer = QTimer()
            self.connection_check_timer.timeout.connect(self._check_connection_status)
            self.connection_check_timer.start(5000)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MainWindow: {e}")
            raise

    def _setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –û—Å–Ω–æ–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞
        self.setWindowTitle("–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ - MOTTO")
        self.setGeometry(100, 100, 1200, 800)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QHBoxLayout(central_widget)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
        self._setup_left_panel(main_layout)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
        self._setup_central_area(main_layout)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        self._setup_right_panel(main_layout)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é
        self._setup_menu()

    def _setup_left_panel(self, main_layout):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
        left_panel = QFrame()
        left_panel.setMaximumWidth(200)
        left_panel.setStyleSheet("""
            QFrame {
                background-color: #2c3e50;
                border-radius: 5px;
                margin: 5px;
            }
        """)
        
        left_layout = QVBoxLayout(left_panel)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("MOTTO")
        title.setStyleSheet("""
            QLabel {
                color: white;
                font-size: 18px;
                font-weight: bold;
                padding: 10px;
            }
        """)
        left_layout.addWidget(title)
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        self.nav_buttons = {}
        nav_items = [
            ("wizard", "üéØ Wizard", "–ú–∞—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"),
            ("sequences", "üìã –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º–∏"),
            ("commands", "üîß –ö–æ–º–∞–Ω–¥—ã", "–û—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"),
            ("settings", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã"),
            ("designer", "üé® –î–∏–∑–∞–π–Ω–µ—Ä", "–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π"),
            ("firmware", "üíæ –ü—Ä–æ—à–∏–≤–∫–∞", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–∏–≤–∫–æ–π")
        ]
        
        for key, text, tooltip in nav_items:
            btn = QPushButton(text)
            btn.setToolTip(tooltip)
            btn.setStyleSheet("""
                QPushButton {
                    background-color: #34495e;
                    color: white;
                    border: none;
                    padding: 10px;
                    text-align: left;
                    border-radius: 3px;
                }
                QPushButton:hover {
                    background-color: #3498db;
                }
                QPushButton:pressed {
                    background-color: #2980b9;
                }
            """)
            btn.clicked.connect(lambda checked, k=key: self._switch_page(k))
            self.nav_buttons[key] = btn
            left_layout.addWidget(btn)
        
        # MOTTO –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if self.motto_info:
            motto_info_widget = self._create_motto_info_widget()
            left_layout.addWidget(motto_info_widget)
        
        left_layout.addStretch()
        main_layout.addWidget(left_panel)

    def _create_motto_info_widget(self) -> QWidget:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ MOTTO"""
        widget = QFrame()
        widget.setStyleSheet("""
            QFrame {
                background-color: #27ae60;
                border-radius: 5px;
                margin: 5px;
                padding: 10px;
            }
        """)
        
        layout = QVBoxLayout(widget)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("MOTTO v1.1")
        title.setStyleSheet("color: white; font-weight: bold;")
        layout.addWidget(title)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_text = f"""
–ö–æ–º–∞–Ω–¥: {self.motto_info.get('commands_count', 0)}
–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π: {self.motto_info.get('sequences_count', 0)}
–£—Å–ª–æ–≤–∏–π: {self.motto_info.get('conditions_count', 0)}
–ì–≤–∞—Ä–¥–æ–≤: {self.motto_info.get('guards_count', 0)}
        """
        
        info_label = QLabel(info_text)
        info_label.setStyleSheet("color: white; font-size: 10px;")
        layout.addWidget(info_label)
        
        return widget

    def _setup_central_area(self, main_layout):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏"""
        self.stacked_widget = QStackedWidget()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü
        self.pages = {}
        
        # Wizard —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        self.pages['wizard'] = WizardPage(self.config.get('wizard', {}))
        self.stacked_widget.addWidget(self.pages['wizard'])
        
        # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.pages['sequences'] = SequencesPage(
            self.config.get('sequences', {}),
            self.sequence_manager
        )
        self.stacked_widget.addWidget(self.pages['sequences'])
        
        # –ö–æ–º–∞–Ω–¥—ã
        self.pages['commands'] = CommandsPage(
            self.config.get('buttons', {}),
            self.serial_manager
        )
        self.stacked_widget.addWidget(self.pages['commands'])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.pages['settings'] = SettingsPage(self.settings_manager)
        self.stacked_widget.addWidget(self.pages['settings'])
        
        # –î–∏–∑–∞–π–Ω–µ—Ä
        self.pages['designer'] = DesignerPage()
        self.stacked_widget.addWidget(self.pages['designer'])
        
        # –ü—Ä–æ—à–∏–≤–∫–∞
        self.pages['firmware'] = FirmwarePage()
        self.stacked_widget.addWidget(self.pages['firmware'])
        
        main_layout.addWidget(self.stacked_widget)

    def _setup_right_panel(self, main_layout):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
        right_panel = QFrame()
        right_panel.setMaximumWidth(300)
        right_panel.setStyleSheet("""
            QFrame {
                background-color: #ecf0f1;
                border-radius: 5px;
                margin: 5px;
            }
        """)
        
        right_layout = QVBoxLayout(right_panel)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
        self.info_panel = InfoPanel()
        right_layout.addWidget(self.info_panel)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è MOTTO –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
        self.motto_progress = QProgressBar()
        self.motto_progress.setVisible(False)
        self.motto_progress.setStyleSheet("""
            QProgressBar {
                border: 2px solid #bdc3c7;
                border-radius: 5px;
                text-align: center;
            }
            QProgressBar::chunk {
                background-color: #3498db;
                border-radius: 3px;
            }
        """)
        right_layout.addWidget(self.motto_progress)
        
        # –õ–æ–≥ MOTTO –æ–ø–µ—Ä–∞—Ü–∏–π
        self.motto_log = QTextEdit()
        self.motto_log.setMaximumHeight(200)
        self.motto_log.setStyleSheet("""
            QTextEdit {
                background-color: white;
                border: 1px solid #bdc3c7;
                border-radius: 3px;
                font-family: monospace;
                font-size: 10px;
            }
        """)
        self.motto_log.setPlaceholderText("MOTTO –æ–ø–µ—Ä–∞—Ü–∏–∏...")
        right_layout.addWidget(self.motto_log)
        
        right_layout.addStretch()
        main_layout.addWidget(right_panel)

    def _setup_menu(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é"""
        menubar = self.menuBar()
        
        # –§–∞–π–ª
        file_menu = menubar.addMenu('–§–∞–π–ª')
        
        # –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        switch_config_action = QAction('–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é', self)
        switch_config_action.triggered.connect(self._switch_config)
        file_menu.addAction(switch_config_action)
        
        # –í—ã—Ö–æ–¥
        exit_action = QAction('–í—ã—Ö–æ–¥', self)
        exit_action.triggered.connect(self.close)
        file_menu.addAction(exit_action)
        
        # MOTTO
        if self.motto_info:
            motto_menu = menubar.addMenu('MOTTO')
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ MOTTO
            motto_info_action = QAction('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', self)
            motto_info_action.triggered.connect(self._show_motto_info)
            motto_menu.addAction(motto_info_action)
            
            # –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            execute_seq_action = QAction('–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å', self)
            execute_seq_action.triggered.connect(self._execute_motto_sequence)
            motto_menu.addAction(execute_seq_action)

    def _setup_connections(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å–∏–≥–Ω–∞–ª–æ–≤"""
        # –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è MOTTO
        self.motto_sequence_progress.connect(self._update_motto_progress)
        self.motto_sequence_completed.connect(self._on_motto_sequence_completed)
        self.motto_sequence_error.connect(self._on_motto_sequence_error)
        self.motto_info_updated.connect(self._update_motto_info)

    def _switch_page(self, page_name: str):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        if page_name in self.pages:
            self.stacked_widget.setCurrentWidget(self.pages[page_name])
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å –∫–Ω–æ–ø–æ–∫
            for key, btn in self.nav_buttons.items():
                if key == page_name:
                    btn.setStyleSheet("""
                        QPushButton {
                            background-color: #3498db;
                            color: white;
                            border: none;
                            padding: 10px;
                            text-align: left;
                            border-radius: 3px;
                        }
                    """)
                else:
                    btn.setStyleSheet("""
                        QPushButton {
                            background-color: #34495e;
                            color: white;
                            border: none;
                            padding: 10px;
                            text-align: left;
                            border-radius: 3px;
                        }
                        QPushButton:hover {
                            background-color: #3498db;
                        }
                        QPushButton:pressed {
                            background-color: #2980b9;
                        }
                    """)

    def _switch_config(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if self.config_file == 'config_motto_fixed.toml':
            new_config = 'config.toml'
        else:
            new_config = 'config_motto_fixed.toml'
        
        try:
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            self.config_loader = MOTTOConfigLoader(new_config)
            self.config = self.config_loader.load()
            self.config_file = new_config
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            self.motto_info = self.config_loader.get_motto_info()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º UI
            self._update_ui_for_config()
            
            self.logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ –Ω–∞: {new_config}")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {e}")

    def _update_ui_for_config(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞
        if self.motto_info:
            self.setWindowTitle("–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ - MOTTO")
        else:
            self.setWindowTitle("–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if 'sequences' in self.pages:
            self.pages['sequences'].update_sequences(self.config.get('sequences', {}))
        
        if 'commands' in self.pages:
            self.pages['commands'].update_commands(self.config.get('buttons', {}))

    def _show_motto_info(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ MOTTO"""
        if self.motto_info:
            info_text = f"""
MOTTO –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è v{self.motto_info.get('version', '1.1')}

–ö–æ–º–∞–Ω–¥: {self.motto_info.get('commands_count', 0)}
–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π: {self.motto_info.get('sequences_count', 0)}
–£—Å–ª–æ–≤–∏–π: {self.motto_info.get('conditions_count', 0)}
–ì–≤–∞—Ä–¥–æ–≤: {self.motto_info.get('guards_count', 0)}
–ü–æ–ª–∏—Ç–∏–∫: {self.motto_info.get('policies_count', 0)}
–†–µ—Å—É—Ä—Å–æ–≤: {self.motto_info.get('resources_count', 0)}
–°–æ–±—ã—Ç–∏–π: {self.motto_info.get('events_count', 0)}
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {self.motto_info.get('handlers_count', 0)}

–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {self.config_file}
            """
            
            QMessageBox.information(self, "MOTTO –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", info_text)
        else:
            QMessageBox.information(self, "MOTTO –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "MOTTO –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

    def _execute_motto_sequence(self):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å MOTTO –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å"""
        if not self.motto_info:
            QMessageBox.warning(self, "MOTTO", "MOTTO –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
        sequences = list(self.config.get('sequences', {}).keys())
        
        if not sequences:
            QMessageBox.warning(self, "MOTTO", "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞
        sequence_name, ok = QInputDialog.getItem(
            self, "–í—ã–±–æ—Ä –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", 
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:",
            sequences, 0, False
        )
        
        if ok and sequence_name:
            self._run_motto_sequence(sequence_name)

    def _run_motto_sequence(self, sequence_name: str):
        """–ó–∞–ø—É—Å–∫ MOTTO –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            self.motto_progress.setVisible(True)
            self.motto_progress.setValue(0)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
            self.motto_log.append(f"üöÄ –ó–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {sequence_name}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            success = self.config_loader.execute_sequence_with_motto(
                sequence_name,
                self.sequence_executor,
                self._motto_progress_callback
            )
            
            if success:
                self.motto_log.append(f"‚úÖ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å '{sequence_name}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                self.motto_log.append(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ '{sequence_name}'")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è MOTTO –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            self.motto_log.append(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        finally:
            # –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            self.motto_progress.setVisible(False)

    def _motto_progress_callback(self, progress: int, message: str):
        """Callback –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ MOTTO –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        self.motto_sequence_progress.emit(progress, message)

    def _update_motto_progress(self, progress: int, message: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ MOTTO"""
        self.motto_progress.setValue(progress)
        self.motto_log.append(f"üìã {message}")

    def _on_motto_sequence_completed(self, sequence_name: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è MOTTO –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        self.motto_log.append(f"‚úÖ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å '{sequence_name}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    def _on_motto_sequence_error(self, sequence_name: str, error: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ MOTTO –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        self.motto_log.append(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ '{sequence_name}': {error}")

    def _update_motto_info(self, info: dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ MOTTO"""
        self.motto_info = info

    def _safe_auto_connect(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∞–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
        try:
            if self.serial_manager.connect():
                self.logger.info("–ê–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            else:
                self.logger.warning("–ê–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

    def _check_connection_status(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            is_connected = self.serial_manager.is_connected()
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ UI
            if hasattr(self, 'info_panel'):
                self.info_panel.update_connection_status(is_connected)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        try:
            # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            if self.serial_manager.is_connected():
                self.serial_manager.disconnect()
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
            if hasattr(self, 'connection_check_timer'):
                self.connection_check_timer.stop()
            
            self.logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
            event.accept()
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
            event.accept()