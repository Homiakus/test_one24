"""
@file: info_panel.py
@description: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å —Å–ø—Ä–∞–≤–∞ —Å –∫–æ–Ω—Å–æ–ª—å—é –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
@dependencies: PyQt6, monitoring
@created: 2024-12-19
"""

import logging
from typing import Optional, List
from datetime import datetime

from PyQt6.QtCore import Qt, QPropertyAnimation, QEasingCurve, QRect, QTimer, pyqtSignal as pyqtSignal as Signal
from PyQt6.QtGui import QFont, QTextCursor, QColor, QPalette
from PyQt6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QPushButton,
    QFrame, QScrollArea, QSizePolicy, QGraphicsDropShadowEffect,
    QTextEdit, QTabWidget, QSplitter, QGroupBox
)

from monitoring import MonitoringManager
from ui.pages.monitoring_page import MonitoringPage


class ConsoleWidget(QTextEdit):
    """–í–∏–¥–∂–µ—Ç –∫–æ–Ω—Å–æ–ª–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setup_console()
        
    def setup_console(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Å–æ–ª–∏"""
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç
        font = QFont("Consolas", 10)
        self.setFont(font)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤
        palette = self.palette()
        palette.setColor(QPalette.Base, QColor("#1e1e1e"))
        palette.setColor(QPalette.Text, QColor("#ffffff"))
        self.setPalette(palette)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
        self.setStyleSheet("""
            QTextEdit {
                background-color: #1e1e1e;
                color: #ffffff;
                border: 1px solid #404040;
                border-radius: 4px;
                padding: 8px;
            }
        """)
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
        self.max_lines = 1000
        
    def add_message(self, message: str, level: str = "INFO"):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        
        # –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
        colors = {
            "INFO": "#ffffff",
            "WARNING": "#ffaa00",
            "ERROR": "#ff4444",
            "CRITICAL": "#ff0000",
            "DEBUG": "#888888",
            "SUCCESS": "#44ff44"
        }
        
        color = colors.get(level, "#ffffff")
        formatted_message = f'<span style="color: {color}">[{timestamp}] {level}: {message}</span><br>'
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        cursor = self.textCursor()
        cursor.movePosition(QTextCursor.End)
        self.setTextCursor(cursor)
        self.insertHtml(formatted_message)
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –∫–æ–Ω—Ü—É
        self.ensureCursorVisible()
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
        self.limit_lines()
        
    def limit_lines(self):
        """–û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫"""
        text = self.toPlainText()
        lines = text.split('\n')
        
        if len(lines) > self.max_lines:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å—Ç—Ä–æ–∫–∏
            lines = lines[-self.max_lines:]
            self.setPlainText('\n'.join(lines))
            
    def clear_console(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å"""
        self.clear()


class DiagnosticsWidget(QWidget):
    """–í–∏–¥–∂–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setup_ui()
        
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(10, 10, 10, 10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
        title.setStyleSheet("""
            QLabel {
                color: #ffffff;
                font-size: 14px;
                font-weight: bold;
                padding: 5px;
            }
        """)
        layout.addWidget(title)
        
        # –û–±–ª–∞—Å—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.diagnostics_area = QTextEdit()
        self.diagnostics_area.setMaximumHeight(200)
        self.diagnostics_area.setStyleSheet("""
            QTextEdit {
                background-color: #2a2a2a;
                color: #ffffff;
                border: 1px solid #404040;
                border-radius: 4px;
                padding: 8px;
                font-size: 11px;
            }
        """)
        layout.addWidget(self.diagnostics_area)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = QHBoxLayout()
        
        self.refresh_button = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
        self.refresh_button.setStyleSheet("""
            QPushButton {
                background-color: #404040;
                color: #ffffff;
                border: none;
                padding: 5px 10px;
                border-radius: 3px;
            }
            QPushButton:hover {
                background-color: #505050;
            }
        """)
        
        self.clear_button = QPushButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å")
        self.clear_button.setStyleSheet("""
            QPushButton {
                background-color: #404040;
                color: #ffffff;
                border: none;
                padding: 5px 10px;
                border-radius: 3px;
            }
            QPushButton:hover {
                background-color: #505050;
            }
        """)
        
        buttons_layout.addWidget(self.refresh_button)
        buttons_layout.addWidget(self.clear_button)
        buttons_layout.addStretch()
        
        layout.addLayout(buttons_layout)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
        self.refresh_button.clicked.connect(self.refresh_diagnostics)
        self.clear_button.clicked.connect(self.clear_diagnostics)
        
    def add_diagnostic_message(self, message: str, level: str = "INFO"):
        """–î–æ–±–∞–≤–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        formatted_message = f"[{timestamp}] {level}: {message}\n"
        
        cursor = self.diagnostics_area.textCursor()
        cursor.movePosition(QTextCursor.End)
        self.diagnostics_area.setTextCursor(cursor)
        self.diagnostics_area.insertPlainText(formatted_message)
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –∫–æ–Ω—Ü—É
        self.diagnostics_area.ensureCursorVisible()
        
    def refresh_diagnostics(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        self.add_diagnostic_message("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞", "INFO")
        
    def clear_diagnostics(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É"""
        self.diagnostics_area.clear()


class InfoPanel(QWidget):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å —Å–ø—Ä–∞–≤–∞"""

    def __init__(self, monitoring_manager: MonitoringManager, parent: Optional[QWidget] = None):
        super().__init__(parent)
        self.logger = logging.getLogger(__name__)
        self.monitoring_manager = monitoring_manager

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–Ω–µ–ª–∏
        self.is_open = False
        self.panel_width = 450

        # –ê–Ω–∏–º–∞—Ü–∏—è
        self.animation = QPropertyAnimation(self, b"geometry")
        self.animation.setDuration(300)
        self.animation.setEasingCurve(QEasingCurve.Type.OutCubic)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏–¥–∂–µ—Ç–∞
        self.setup_ui()
        self.setup_animations()
        self.setup_console_logging()

        # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - —Å–∫—Ä—ã—Ç–∞
        self.hide_panel()

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(0, 0, 0, 0)
        main_layout.setSpacing(0)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–Ω–µ–ª–∏
        self.create_header(main_layout)

        # –û–±–ª–∞—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        self.create_content_area(main_layout)

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∏–ª–µ–π
        self.setObjectName("info_panel")
        self.setStyleSheet("""
            QWidget#info_panel {
                background-color: #2b2b2b;
                border-left: 1px solid #404040;
            }

            QLabel#panel_title {
                color: #ffffff;
                font-size: 16px;
                font-weight: bold;
                padding: 10px;
            }

            QPushButton#close_button {
                background-color: transparent;
                border: none;
                color: #ffffff;
                font-size: 18px;
                padding: 5px;
                border-radius: 3px;
            }

            QPushButton#close_button:hover {
                background-color: #404040;
            }

            QScrollArea {
                border: none;
                background-color: transparent;
            }

            QWidget#scroll_content {
                background-color: transparent;
            }
        """)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–Ω—å
        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(20)
        shadow.setColor(QColor(0, 0, 0, 80))
        shadow.setOffset(-5, 0)
        self.setGraphicsEffect(shadow)

    def create_header(self, parent_layout):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø–∞–Ω–µ–ª–∏"""
        header_widget = QWidget()
        header_layout = QHBoxLayout(header_widget)
        header_layout.setContentsMargins(15, 10, 15, 10)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å")
        title.setObjectName("panel_title")

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_button = QPushButton("√ó")
        close_button.setObjectName("close_button")
        close_button.setFixedSize(30, 30)
        close_button.clicked.connect(self.hide_panel)

        header_layout.addWidget(title)
        header_layout.addStretch()
        header_layout.addWidget(close_button)

        parent_layout.addWidget(header_widget)

    def create_content_area(self, parent_layout):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        self.scroll_area = QScrollArea()
        self.scroll_area.setWidgetResizable(True)
        self.scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        self.scroll_area.setVerticalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAsNeeded)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        self.scroll_content = QWidget()
        self.scroll_content.setObjectName("scroll_content")
        self.scroll_content.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Expanding)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        content_layout = QVBoxLayout(self.scroll_content)
        content_layout.setContentsMargins(10, 10, 10, 10)

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±—ã
        self.tab_widget = QTabWidget()
        
        # –í–∫–ª–∞–¥–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.monitoring_page = MonitoringPage(self.monitoring_manager)
        self.tab_widget.addTab(self.monitoring_page, "üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
        
        # –í–∫–ª–∞–¥–∫–∞ –∫–æ–Ω—Å–æ–ª–∏
        self.console_widget = ConsoleWidget()
        self.tab_widget.addTab(self.console_widget, "üíª –ö–æ–Ω—Å–æ–ª—å")
        
        # –í–∫–ª–∞–¥–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        self.diagnostics_widget = DiagnosticsWidget()
        self.tab_widget.addTab(self.diagnostics_widget, "üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")

        content_layout.addWidget(self.tab_widget)

        self.scroll_area.setWidget(self.scroll_content)
        parent_layout.addWidget(self.scroll_area)

    def setup_animations(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–π"""
        self.animation.finished.connect(self.on_animation_finished)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é (—Å–∫—Ä—ã—Ç–∞ —Å–ø—Ä–∞–≤–∞)
        if self.parent():
            self.setGeometry(
                self.parent().width(),
                0,
                self.panel_width,
                self.parent().height()
            )

    def setup_console_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å"""
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
        class ConsoleHandler(logging.Handler):
            def __init__(self, console_widget):
                super().__init__()
                self.console_widget = console_widget
                
            def emit(self, record):
                msg = self.format(record)
                level = record.levelname
                self.console_widget.add_message(msg, level)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É –ª–æ–≥–≥–µ—Ä—É
        console_handler = ConsoleHandler(self.console_widget)
        console_handler.setFormatter(logging.Formatter('%(message)s'))
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        root_logger = logging.getLogger()
        root_logger.addHandler(console_handler)

    def show_panel(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å"""
        if self.is_open:
            return

        self.is_open = True
        self.show()

        # –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        start_rect = self.geometry()
        end_rect = QRect(
            start_rect.x() - self.panel_width,
            start_rect.y(),
            self.panel_width,
            start_rect.height()
        )

        self.animation.setStartValue(start_rect)
        self.animation.setEndValue(end_rect)
        self.animation.start()

    def hide_panel(self):
        """–°–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å"""
        if not self.is_open:
            return

        self.is_open = False
        
        # –ê–Ω–∏–º–∞—Ü–∏—è —Å–∫—Ä—ã—Ç–∏—è
        start_rect = self.geometry()
        end_rect = QRect(
            start_rect.x() + self.panel_width,
            start_rect.y(),
            self.panel_width,
            start_rect.height()
        )

        self.animation.setStartValue(start_rect)
        self.animation.setEndValue(end_rect)
        self.animation.start()

    def on_animation_finished(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏"""
        if not self.is_open:
            self.hide()

    def resizeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞"""
        super().resizeEvent(event)

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–∞–Ω–µ–ª–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
        if self.is_open:
            self.setGeometry(
                self.parent().width() - self.panel_width,
                0,
                self.panel_width,
                self.parent().height()
            )
        else:
            self.setGeometry(
                self.parent().width(),
                0,
                self.panel_width,
                self.parent().height()
            )

    def update_monitoring_data(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if hasattr(self, 'monitoring_page'):
            self.monitoring_page.refresh_data()

    def add_console_message(self, message: str, level: str = "INFO"):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å"""
        if hasattr(self, 'console_widget'):
            self.console_widget.add_message(message, level)

    def add_diagnostic_message(self, message: str, level: str = "INFO"):
        """–î–æ–±–∞–≤–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if hasattr(self, 'diagnostics_widget'):
            self.diagnostics_widget.add_diagnostic_message(message, level)

    def get_panel_width(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —à–∏—Ä–∏–Ω—É –ø–∞–Ω–µ–ª–∏"""
        return self.panel_width

    def set_panel_width(self, width: int):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à–∏—Ä–∏–Ω—É –ø–∞–Ω–µ–ª–∏"""
        self.panel_width = max(400, min(800, width))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ—Ç 400 –¥–æ 800px
        if self.is_open:
            self.resizeEvent(None)
