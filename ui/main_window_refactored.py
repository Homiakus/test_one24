"""
/**
 * @file: main_window_refactored.py
 * @description: –†–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è MainWindow —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 * @dependencies: PySide6.QtWidgets, PySide6.QtCore, ui.components, event_bus
 * @created: 2024-12-19
 */

–†–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è MainWindow, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
- EventBus –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
- NavigationManager –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
- PageManager –¥–ª—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
- ConnectionManager –¥–ª—è Serial –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π

MainWindow —Ç–µ–ø–µ—Ä—å —è–≤–ª—è–µ—Ç—Å—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–º, –∞ –Ω–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º.
"""

import logging
from typing import Dict, Optional, Any
from pathlib import Path

from PyQt6.QtCore import Qt, QTimer, pyqtSignal as Signal
from PyQt6.QtGui import QKeyEvent
from PyQt6.QtWidgets import (
    QMainWindow, QWidget, QHBoxLayout, QVBoxLayout,
    QStackedWidget, QPushButton, QLabel, QFrame,
    QToolButton, QMenu, QMessageBox, QApplication,
    QGroupBox, QCheckBox
)
from PyQt6.QtGui import QAction

from config.settings import SettingsManager
from config.config_loader import ConfigLoader
from core.serial_manager import SerialManager
from core.sequence_manager import SequenceManager, CommandSequenceExecutor
from ui.pages.wizard_page import WizardPage
from ui.pages.settings_page import SettingsPage
from ui.pages.sequences_page import SequencesPage
from ui.pages.commands_page import CommandsPage
from ui.pages.designer_page import DesignerPage
from ui.pages.firmware_page import FirmwarePage
from ui.widgets.modern_widgets import ModernCard

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
from ui.components.event_bus import event_bus
from ui.components.navigation_manager import NavigationManager
from ui.components.page_manager import PageManager
from ui.components.connection_manager import ConnectionManager


class MainWindow(QMainWindow):
    """
    –†–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    
    –¢–µ–ø–µ—Ä—å —è–≤–ª—è–µ—Ç—Å—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤,
    –∞ –Ω–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π.
    """

    def __init__(self):
        super().__init__()
        self.logger = logging.getLogger(__name__)

        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
            self.logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤...")
            self._init_managers()
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            self.logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
            self.config = self.config_loader.load()
            self.logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            self.logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
            self._init_components()
            self.logger.info("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI
            self.logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI...")
            self._setup_ui()
            self.logger.info("UI –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            self.logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
            self._setup_connections()
            self.logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

            # –ê–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if self.settings_manager.update_settings.auto_connect:
                self.logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
                self._setup_auto_connect()
            
            # –ó–∞–ø—É—Å–∫ –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ
            self.logger.info("–ü–æ–∫–∞–∑ –æ–∫–Ω–∞...")
            self.show()
            self.is_fullscreen = False

            self.logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}", exc_info=True)
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:\n{e}"
            )
            raise

    def _init_managers(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""
        self.settings_manager = SettingsManager()
        self.config_loader = ConfigLoader()
        self.serial_manager = SerialManager()
        self.sequence_manager = SequenceManager(
            {}, {}  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        )

    def _init_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        # –°–æ–∑–¥–∞–µ–º content_area –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.content_area = QStackedWidget()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º PageManager
        self.page_manager = PageManager(self.content_area)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º NavigationManager
        self.navigation_manager = NavigationManager(self.content_area)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ConnectionManager
        self.connection_manager = ConnectionManager(
            self.serial_manager, 
            self.statusBar()
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ–∞–±—Ä–∏–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü
        self._register_page_factories()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º SequenceManager —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        self.sequence_manager = SequenceManager(
            self.config.get('sequences', {}),
            self.config.get('buttons', {})
        )

    def _register_page_factories(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ–∞–±—Ä–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü"""
        # –§–∞–±—Ä–∏–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü
        page_factories = {
            'wizard': lambda config: WizardPage(config),
            'sequences': lambda config: SequencesPage(config),
            'commands': lambda config: CommandsPage(config),
            'designer': lambda config: DesignerPage(config),
            'settings': lambda config: SettingsPage(self.settings_manager),
            'firmware': lambda config: FirmwarePage()
        }
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ–∞–±—Ä–∏–∫–∏
        for page_name, factory in page_factories.items():
            self.page_manager.register_page_factory(page_name, factory)

    def _setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.setWindowTitle("–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º (–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥)")
        self.setMinimumSize(1200, 800)

        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)

        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QHBoxLayout(central_widget)
        main_layout.setContentsMargins(0, 0, 0, 0)
        main_layout.setSpacing(0)

        # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
        self._create_sidebar()
        main_layout.addWidget(self.sidebar)

        # –û–±–ª–∞—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        main_layout.addWidget(self.content_area, 1)

        # –°—Ç–∞—Ç—É—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        self.statusBar().showMessage("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        self.page_manager.create_all_pages(self.config)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        self.navigation_manager.setup_navigation_buttons(self.nav_buttons)

    def _create_sidebar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
        self.sidebar = QFrame()
        self.sidebar.setObjectName("sidebar")
        self.sidebar.setFixedWidth(250)

        sidebar_layout = QVBoxLayout(self.sidebar)
        sidebar_layout.setContentsMargins(0, 8, 0, 20)
        sidebar_layout.setSpacing(6)

        # –ú–µ–Ω—é
        self._create_menu_button(sidebar_layout)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self._create_header(sidebar_layout)

        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        self._create_navigation(sidebar_layout)

        sidebar_layout.addStretch()

        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self._create_connection_status(sidebar_layout)

    def _create_menu_button(self, parent_layout):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é"""
        menu_button = QToolButton()
        menu_button.setText("‚ò∞")
        menu_button.setPopupMode(QToolButton.InstantPopup)

        menu = QMenu(self)

        actions = [
            ('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é', self._reload_config),
            ('üì∫ –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º', self._toggle_fullscreen),
            ('üé® –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É', self._toggle_theme),
            ('‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ', self._show_about),
            ('‚ùå –í—ã—Ö–æ–¥', self.close),
        ]

        for text, handler in actions:
            action = QAction(text, self)
            action.triggered.connect(handler)
            menu.addAction(action)

        menu_button.setMenu(menu)
        parent_layout.addWidget(menu_button)

    def _create_header(self, parent_layout):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        header_widget = QWidget()
        header_layout = QVBoxLayout(header_widget)
        header_layout.setContentsMargins(20, 0, 20, 20)

        title = QLabel("–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        title.setObjectName("sidebar_title")
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)

        subtitle = QLabel("–°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è")
        subtitle.setObjectName("sidebar_subtitle")
        subtitle.setAlignment(Qt.AlignmentFlag.AlignCenter)

        header_layout.addWidget(title)
        header_layout.addWidget(subtitle)

        parent_layout.addWidget(header_widget)

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        separator = QFrame()
        separator.setFrameShape(QFrame.Shape.HLine)
        separator.setObjectName("separator")
        parent_layout.addWidget(separator)

    def _create_navigation(self, parent_layout):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        nav_widget = QWidget()
        nav_layout = QVBoxLayout(nav_widget)
        nav_layout.setContentsMargins(10, 20, 10, 20)
        nav_layout.setSpacing(5)

        self.nav_buttons = {}

        pages = [
            ("wizard", "ü™Ñ –ú–∞—Å—Ç–µ—Ä", True),
            ("sequences", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", False),
            ("commands", "‚ö° –ö–æ–º–∞–Ω–¥—ã", False),
            ("designer", "üñ±Ô∏è –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä", False),
            ("settings", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", False),
            ("firmware", "üîß –ü—Ä–æ—à–∏–≤–∫–∞", False),
        ]

        for key, text, checked in pages:
            btn = QPushButton(text)
            btn.setCheckable(True)
            btn.setChecked(checked)
            btn.setObjectName("nav_button")
            self.nav_buttons[key] = btn
            nav_layout.addWidget(btn)

        parent_layout.addWidget(nav_widget)

    def _create_connection_status(self, parent_layout):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        self.connection_card = ModernCard()
        layout = QVBoxLayout()

        self.connection_status = QLabel("‚óè –û—Ç–∫–ª—é—á–µ–Ω–æ")
        self.connection_status.setObjectName("connection_status")
        layout.addWidget(self.connection_status)

        self.connection_card.addLayout(layout)
        parent_layout.addWidget(self.connection_card)

    def _setup_connections(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ —Å–ª–æ—Ç–æ–≤"""
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è EventBus
        event_bus.subscribe("connection_status_changed", self._on_connection_status_changed)
        event_bus.subscribe("page_changed", self._on_page_changed)
        event_bus.subscribe("data_received", self._on_data_received)
        event_bus.subscribe("error_occurred", self._on_error_occurred)
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
        self._setup_page_connections()

    def _setup_page_connections(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏"""
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ PageManager
        wizard_page = self.page_manager.get_page('wizard')
        if wizard_page:
            wizard_page.sequence_requested.connect(self._start_sequence)
            wizard_page.zone_selection_changed.connect(self._on_zone_changed)

        settings_page = self.page_manager.get_page('settings')
        if settings_page:
            settings_page.connect_requested.connect(self._on_connect_requested)
            settings_page.disconnect_requested.connect(self._on_disconnect_requested)
            settings_page.config_reload_requested.connect(self._reload_config)
            settings_page.status_message.connect(
                lambda msg, timeout: self.statusBar().showMessage(msg, timeout)
            )

        sequences_page = self.page_manager.get_page('sequences')
        if sequences_page:
            sequences_page.sequence_execute_requested.connect(self._start_sequence)
            sequences_page.sequence_edited.connect(self._on_sequence_edited)

        commands_page = self.page_manager.get_page('commands')
        if commands_page:
            commands_page.command_execute_requested.connect(self._execute_command)

        designer_page = self.page_manager.get_page('designer')
        if designer_page:
            designer_page.sequence_created.connect(self._on_sequence_created)

    def _setup_auto_connect(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            # –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ ConnectionManager
            self.connection_manager.enable_auto_connect(True)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            port = self.settings_manager.serial_settings.port
            if port and port.strip():
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ConnectionManager
                self.connection_manager.perform_auto_connect(
                    port, 
                    self.settings_manager.serial_settings.__dict__
                )
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

    def _on_connection_status_changed(self, status: str, message: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            status_config = {
                "connected": ("‚óè –ü–æ–¥–∫–ª—é—á–µ–Ω–æ", "color: #50fa7b;"),
                "disconnected": ("‚óè –û—Ç–∫–ª—é—á–µ–Ω–æ", "color: #ffb86c;"),
                "error": ("‚óè –û—à–∏–±–∫–∞", "color: #ff5555;"),
                "connecting": ("‚óè –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...", "color: #ffb86c;")
            }
            
            text, color = status_config.get(status, ("‚óè –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "color: #ff5555;"))
            self.connection_status.setText(text)
            self.connection_status.setStyleSheet(color)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É
            if message:
                self.statusBar().showMessage(message, 3000)
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

    def _on_page_changed(self, page_name: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        self.logger.info(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {page_name}")

    def _on_data_received(self, data: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        self.logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ: {data}")

        # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if hasattr(self, 'sequence_executor') and self.sequence_executor and self.sequence_executor.isRunning():
            self.sequence_executor.add_response(data)

        # –ü–µ—Ä–µ–¥–∞–µ–º –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å
        terminal_page = self.page_manager.get_page('commands')
        if terminal_page:
            terminal_page.add_command_output(f"–ü–æ–ª—É—á–µ–Ω–æ: {data}")

    def _on_error_occurred(self, error_type: str, message: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        self.logger.error(f"–û—à–∏–±–∫–∞ {error_type}: {message}")
        self.statusBar().showMessage(f"–û—à–∏–±–∫–∞: {message}", 5000)

    def _on_connect_requested(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            settings = self.settings_manager.serial_settings
            if settings.port and settings.port.strip():
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ EventBus
                event_bus.emit("connect_requested", 
                              port=settings.port, 
                              settings=settings.__dict__)
            else:
                QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ü–æ—Ä—Ç –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

    def _on_disconnect_requested(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ EventBus
            event_bus.emit("disconnect_requested")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: {e}")

    def _start_sequence(self, sequence_name: str, next_step: int = 0):
        """–ó–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥"""
        if not self.connection_manager.is_connected():
            QMessageBox.warning(
                self,
                "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
                "–ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
            )
            return

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if hasattr(self, 'sequence_executor') and self.sequence_executor and self.sequence_executor.isRunning():
            self.sequence_executor.stop()

        # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        commands = self.sequence_manager.expand_sequence(sequence_name)
        if not commands:
            self.logger.error(f"–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å '{sequence_name}' –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
        self.sequence_executor = CommandSequenceExecutor(
            self.serial_manager,
            commands,
            self.config_loader.sequence_keywords
        )

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
        self.sequence_executor.progress_updated.connect(self._on_sequence_progress)
        self.sequence_executor.command_sent.connect(self._on_command_sent)
        self.sequence_executor.sequence_finished.connect(
            lambda success, msg: self._on_sequence_finished(success, msg, next_step)
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º
        self.sequence_executor.start()
        self.logger.info(f"–ó–∞–ø—É—â–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å '{sequence_name}'")

    def _execute_command(self, command: str):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã"""
        if not self.connection_manager.is_connected():
            QMessageBox.warning(
                self,
                "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
                "–ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã"
            )
            return

        success = self.serial_manager.send_command(command)
        if success:
            self.logger.info(f"–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {command}")
            self.statusBar().showMessage(f"–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {command}", 3000)
        else:
            self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É: {command}")
            self.statusBar().showMessage(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã", 5000)

    def _on_sequence_progress(self, current: int, total: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –º–∞—Å—Ç–µ—Ä–∞
        wizard_page = self.page_manager.get_page('wizard')
        if wizard_page:
            wizard_page.update_progress(current, total)

        self.statusBar().showMessage(
            f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {current}/{total}", 1000
        )

    def _on_command_sent(self, command: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã"""
        self.logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {command}")

    def _on_sequence_finished(self, success: bool, message: str, next_step: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        self.logger.info(f"–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {message}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–∞—Å—Ç–µ—Ä–∞
        wizard_page = self.page_manager.get_page('wizard')
        if wizard_page:
            wizard_page.on_sequence_finished(success, next_step)

        if success:
            self.statusBar().showMessage("‚úì " + message, 3000)
        else:
            self.statusBar().showMessage("‚úó " + message, 5000)

    def _on_zone_changed(self, zones: Dict[str, bool]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∑–æ–Ω"""
        self.logger.info(f"–í—ã–±—Ä–∞–Ω—ã –∑–æ–Ω—ã: {zones}")

    def _on_sequence_created(self, sequence_name: str, commands: list):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ"""
        self.config['sequences'][sequence_name] = commands
        self.config_loader.save_sequences(self.config['sequences'])
        self.logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {sequence_name}")

    def _on_sequence_edited(self, sequence_name: str, commands: list):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        self.config['sequences'][sequence_name] = commands
        self.config_loader.save_sequences(self.config['sequences'])
        self.logger.info(f"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {sequence_name}")

    def _reload_config(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            self.logger.info("–ù–∞—á–∞–ª–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            self.config = self.config_loader.load()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º SequenceManager
            self.sequence_manager = SequenceManager(
                self.config.get('sequences', {}),
                self.config.get('buttons', {})
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            event_bus.emit("config_reloaded")
            
            self.statusBar().showMessage("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞", 3000)
            self.logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞",
                f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n{e}"
            )

    def _toggle_fullscreen(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        if self.is_fullscreen:
            self.showNormal()
            self.is_fullscreen = False
        else:
            self.showFullScreen()
            self.is_fullscreen = True

    def _toggle_theme(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã"""
        current = self.settings_manager.update_settings.theme
        new_theme = 'light' if current == 'dark' else 'dark'

        self.settings_manager.update_settings.theme = new_theme
        self.settings_manager.save_update_settings()

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
        from main import apply_theme
        apply_theme(QApplication.instance(), new_theme)

        self.statusBar().showMessage(
            f"–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {'—Å–≤–µ—Ç–ª—É—é' if new_theme == 'light' else '—Ç—ë–º–Ω—É—é'}",
            3000
        )

    def _show_about(self):
        """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        QMessageBox.about(
            self,
            "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ",
            "<h2>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º</h2>"
            "<p><b>–í–µ—Ä—Å–∏—è:</b> 2.0 (–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ - –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)</p>"
            "<p><b>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</b> Python, PySide6, Serial, EventBus</p>"
            "<p>¬© 2024 –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã</p>"
        )

    def keyPressEvent(self, event: QKeyEvent):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à"""
        if event.key() == Qt.Key.Key_Escape:
            if self.is_fullscreen:
                self._toggle_fullscreen()
            else:
                self.close()
        else:
            super().keyPressEvent(event)

    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        try:
            self.logger.info("–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
            
            # –û—á–∏—â–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            self._cleanup_components()
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            if hasattr(self, 'sequence_executor') and self.sequence_executor:
                if self.sequence_executor.isRunning():
                    self.sequence_executor.stop()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if hasattr(self, 'settings_manager'):
                self.settings_manager.save_all()
            
            self.logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ")
            event.accept()
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
            event.accept()

    def _cleanup_components(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            # –û—á–∏—â–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            if hasattr(self, 'page_manager'):
                self.page_manager.cleanup()
            
            if hasattr(self, 'navigation_manager'):
                self.navigation_manager.cleanup()
            
            if hasattr(self, 'connection_manager'):
                self.connection_manager.cleanup()
            
            # –û—á–∏—â–∞–µ–º EventBus
            event_bus.cleanup()
            
            self.logger.info("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ—á–∏—â–µ–Ω—ã")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
